# This is an autogenerated file for dynamic methods in User
# Please rerun rake rails_rbi:models[User] to regenerate.

# typed: strong
module User::EnumInstanceMethods
  extend T::Sig

  sig { returns(T::Boolean) }
  def member?; end

  sig { void }
  def member!; end

  sig { returns(T::Boolean) }
  def moderator?; end

  sig { void }
  def moderator!; end

  sig { returns(T::Boolean) }
  def admin?; end

  sig { void }
  def admin!; end
end

module User::GeneratedAttributeMethods
  extend T::Sig

  sig { returns(String) }
  def bio; end

  sig { params(value: String).void }
  def bio=(value); end

  sig { returns(T::Boolean) }
  def bio?; end

  sig { returns(T.nilable(DateTime)) }
  def confirmation_sent_at; end

  sig { params(value: T.nilable(DateTime)).void }
  def confirmation_sent_at=(value); end

  sig { returns(T::Boolean) }
  def confirmation_sent_at?; end

  sig { returns(T.nilable(String)) }
  def confirmation_token; end

  sig { params(value: T.nilable(String)).void }
  def confirmation_token=(value); end

  sig { returns(T::Boolean) }
  def confirmation_token?; end

  sig { returns(T.nilable(DateTime)) }
  def confirmed_at; end

  sig { params(value: T.nilable(DateTime)).void }
  def confirmed_at=(value); end

  sig { returns(T::Boolean) }
  def confirmed_at?; end

  sig { returns(DateTime) }
  def created_at; end

  sig { params(value: DateTime).void }
  def created_at=(value); end

  sig { returns(T::Boolean) }
  def created_at?; end

  sig { returns(T.nilable(DateTime)) }
  def current_sign_in_at; end

  sig { params(value: T.nilable(DateTime)).void }
  def current_sign_in_at=(value); end

  sig { returns(T::Boolean) }
  def current_sign_in_at?; end

  sig { returns(T.nilable(T.untyped)) }
  def current_sign_in_ip; end

  sig { params(value: T.nilable(T.untyped)).void }
  def current_sign_in_ip=(value); end

  sig { returns(T::Boolean) }
  def current_sign_in_ip?; end

  sig { returns(String) }
  def email; end

  sig { params(value: String).void }
  def email=(value); end

  sig { returns(T::Boolean) }
  def email?; end

  sig { returns(String) }
  def encrypted_password; end

  sig { params(value: String).void }
  def encrypted_password=(value); end

  sig { returns(T::Boolean) }
  def encrypted_password?; end

  sig { returns(Integer) }
  def id; end

  sig { params(value: Integer).void }
  def id=(value); end

  sig { returns(T::Boolean) }
  def id?; end

  sig { returns(T.nilable(DateTime)) }
  def last_sign_in_at; end

  sig { params(value: T.nilable(DateTime)).void }
  def last_sign_in_at=(value); end

  sig { returns(T::Boolean) }
  def last_sign_in_at?; end

  sig { returns(T.nilable(T.untyped)) }
  def last_sign_in_ip; end

  sig { params(value: T.nilable(T.untyped)).void }
  def last_sign_in_ip=(value); end

  sig { returns(T::Boolean) }
  def last_sign_in_ip?; end

  sig { returns(T.nilable(DateTime)) }
  def remember_created_at; end

  sig { params(value: T.nilable(DateTime)).void }
  def remember_created_at=(value); end

  sig { returns(T::Boolean) }
  def remember_created_at?; end

  sig { returns(T.nilable(DateTime)) }
  def reset_password_sent_at; end

  sig { params(value: T.nilable(DateTime)).void }
  def reset_password_sent_at=(value); end

  sig { returns(T::Boolean) }
  def reset_password_sent_at?; end

  sig { returns(T.nilable(String)) }
  def reset_password_token; end

  sig { params(value: T.nilable(String)).void }
  def reset_password_token=(value); end

  sig { returns(T::Boolean) }
  def reset_password_token?; end

  sig { returns(String) }
  def role; end

  sig { params(value: T.any(Integer, String, Symbol)).void }
  def role=(value); end

  sig { returns(T::Boolean) }
  def role?; end

  sig { returns(Integer) }
  def sign_in_count; end

  sig { params(value: Integer).void }
  def sign_in_count=(value); end

  sig { returns(T::Boolean) }
  def sign_in_count?; end

  sig { returns(T.nilable(String)) }
  def slug; end

  sig { params(value: T.nilable(String)).void }
  def slug=(value); end

  sig { returns(T::Boolean) }
  def slug?; end

  sig { returns(T.nilable(String)) }
  def unconfirmed_email; end

  sig { params(value: T.nilable(String)).void }
  def unconfirmed_email=(value); end

  sig { returns(T::Boolean) }
  def unconfirmed_email?; end

  sig { returns(DateTime) }
  def updated_at; end

  sig { params(value: DateTime).void }
  def updated_at=(value); end

  sig { returns(T::Boolean) }
  def updated_at?; end

  sig { returns(String) }
  def username; end

  sig { params(value: String).void }
  def username=(value); end

  sig { returns(T::Boolean) }
  def username?; end
end

module Kaminari::ActiveRecordModelExtension
  sig { params(num: Integer).returns(User::ActiveRecord_Relation) }
  def page(num = nil); end
end

class User::ActiveRecord_Relation < ActiveRecord::Relation
  include User::ModelRelationShared
  extend T::Sig
  extend T::Generic
  Elem = type_member(fixed: User)
end

class User::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  include User::ModelRelationShared
  extend T::Sig
  extend T::Generic
  Elem = type_member(fixed: User)
end

class User < ApplicationRecord
  include User::EnumInstanceMethods
  include User::GeneratedAttributeMethods
  include User::GeneratedAssociationMethods
  extend T::Sig
  extend T::Generic
  extend User::ModelRelationShared
  Elem = type_template(fixed: User)

  sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
  def self.roles; end

  sig { returns(User::ActiveRecord_Relation) }
  def self.member; end

  sig { returns(User::ActiveRecord_Relation) }
  def self.moderator; end

  sig { returns(User::ActiveRecord_Relation) }
  def self.admin; end

  sig { returns(T.untyped) }
  def after_add_for_game_purchases; end

  sig { returns(T.untyped) }
  def after_add_for_game_purchases?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_add_for_game_purchases=(val); end

  sig { returns(T.untyped) }
  def after_remove_for_game_purchases; end

  sig { returns(T.untyped) }
  def after_remove_for_game_purchases?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_remove_for_game_purchases=(val); end

  sig { returns(T.untyped) }
  def before_add_for_game_purchases; end

  sig { returns(T.untyped) }
  def before_add_for_game_purchases?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_add_for_game_purchases=(val); end

  sig { returns(T.untyped) }
  def before_remove_for_game_purchases; end

  sig { returns(T.untyped) }
  def before_remove_for_game_purchases?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_remove_for_game_purchases=(val); end

  sig { returns(T.untyped) }
  def after_add_for_games; end

  sig { returns(T.untyped) }
  def after_add_for_games?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_add_for_games=(val); end

  sig { returns(T.untyped) }
  def after_remove_for_games; end

  sig { returns(T.untyped) }
  def after_remove_for_games?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_remove_for_games=(val); end

  sig { returns(T.untyped) }
  def before_add_for_games; end

  sig { returns(T.untyped) }
  def before_add_for_games?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_add_for_games=(val); end

  sig { returns(T.untyped) }
  def before_remove_for_games; end

  sig { returns(T.untyped) }
  def before_remove_for_games?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_remove_for_games=(val); end

  sig { returns(T.untyped) }
  def after_add_for_favorite_games; end

  sig { returns(T.untyped) }
  def after_add_for_favorite_games?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_add_for_favorite_games=(val); end

  sig { returns(T.untyped) }
  def after_remove_for_favorite_games; end

  sig { returns(T.untyped) }
  def after_remove_for_favorite_games?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_remove_for_favorite_games=(val); end

  sig { returns(T.untyped) }
  def before_add_for_favorite_games; end

  sig { returns(T.untyped) }
  def before_add_for_favorite_games?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_add_for_favorite_games=(val); end

  sig { returns(T.untyped) }
  def before_remove_for_favorite_games; end

  sig { returns(T.untyped) }
  def before_remove_for_favorite_games?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_remove_for_favorite_games=(val); end

  sig { returns(T.untyped) }
  def after_add_for_avatar_blob; end

  sig { returns(T.untyped) }
  def after_add_for_avatar_blob?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_add_for_avatar_blob=(val); end

  sig { returns(T.untyped) }
  def after_remove_for_avatar_blob; end

  sig { returns(T.untyped) }
  def after_remove_for_avatar_blob?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_remove_for_avatar_blob=(val); end

  sig { returns(T.untyped) }
  def before_add_for_avatar_blob; end

  sig { returns(T.untyped) }
  def before_add_for_avatar_blob?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_add_for_avatar_blob=(val); end

  sig { returns(T.untyped) }
  def before_remove_for_avatar_blob; end

  sig { returns(T.untyped) }
  def before_remove_for_avatar_blob?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_remove_for_avatar_blob=(val); end
end

module User::ModelRelationShared
  include Kaminari::ActiveRecordModelExtension
  extend T::Sig

  sig { params(args: T.untyped).returns(User::ActiveRecord_Relation) }
  def admin(*args); end

  sig { params(args: T.untyped).returns(User::ActiveRecord_Relation) }
  def member(*args); end

  sig { params(args: T.untyped).returns(User::ActiveRecord_Relation) }
  def moderator(*args); end

  sig { params(args: T.untyped).returns(User::ActiveRecord_Relation) }
  def with_attached_avatar(*args); end

  sig { returns(User::ActiveRecord_Relation) }
  def all; end

  sig { params(block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def unscoped(&block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def select(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def order(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def reorder(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def group(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def limit(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def offset(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def joins(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def left_joins(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def left_outer_joins(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def where(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def rewhere(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def preload(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def eager_load(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def includes(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def from(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def lock(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def readonly(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def extending(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def or(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def having(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def create_with(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def distinct(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def references(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def none(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def unscope(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def merge(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def except(*args, &block); end
end

module User::GeneratedAssociationMethods
  extend T::Sig

  sig { returns(T.nilable(::ActiveStorage::Attachment)) }
  def avatar_attachment; end

  sig { params(value: T.nilable(::ActiveStorage::Attachment)).void }
  def avatar_attachment=(value); end

  sig { returns(T.nilable(::ActiveStorage::Blob)) }
  def avatar_blob; end

  sig { params(value: T.nilable(::ActiveStorage::Blob)).void }
  def avatar_blob=(value); end

  sig { returns(T.nilable(::ExternalAccount)) }
  def external_account; end

  sig { params(value: T.nilable(::ExternalAccount)).void }
  def external_account=(value); end

  sig { returns(::FavoriteGame::ActiveRecord_Associations_CollectionProxy) }
  def favorite_games; end

  sig { params(value: T.any(T::Array[::FavoriteGame], ::FavoriteGame::ActiveRecord_Associations_CollectionProxy)).void }
  def favorite_games=(value); end

  sig { returns(::GamePurchase::ActiveRecord_Associations_CollectionProxy) }
  def game_purchases; end

  sig { params(value: T.any(T::Array[::GamePurchase], ::GamePurchase::ActiveRecord_Associations_CollectionProxy)).void }
  def game_purchases=(value); end

  sig { returns(::Game::ActiveRecord_Associations_CollectionProxy) }
  def games; end

  sig { params(value: T.any(T::Array[::Game], ::Game::ActiveRecord_Associations_CollectionProxy)).void }
  def games=(value); end

  sig { returns(T.untyped) }
  def game_purchase_ids; end

  sig { params(ids: T.untyped).returns(T.untyped) }
  def game_purchase_ids=(ids); end

  sig { returns(T.untyped) }
  def game_ids; end

  sig { params(ids: T.untyped).returns(T.untyped) }
  def game_ids=(ids); end

  sig { returns(T.untyped) }
  def favorite_game_ids; end

  sig { params(ids: T.untyped).returns(T.untyped) }
  def favorite_game_ids=(ids); end

  sig { params(args: T.untyped, block: T.untyped).returns(T.untyped) }
  def build_external_account(*args, &block); end

  sig { params(args: T.untyped, block: T.untyped).returns(T.untyped) }
  def create_external_account(*args, &block); end

  sig { params(args: T.untyped, block: T.untyped).returns(T.untyped) }
  def create_external_account!(*args, &block); end

  sig { returns(T.untyped) }
  def reload_external_account; end

  sig { params(args: T.untyped, block: T.untyped).returns(T.untyped) }
  def build_avatar_attachment(*args, &block); end

  sig { params(args: T.untyped, block: T.untyped).returns(T.untyped) }
  def create_avatar_attachment(*args, &block); end

  sig { params(args: T.untyped, block: T.untyped).returns(T.untyped) }
  def create_avatar_attachment!(*args, &block); end

  sig { returns(T.untyped) }
  def reload_avatar_attachment; end

  sig { returns(T.untyped) }
  def avatar_blob_ids; end

  sig { params(ids: T.untyped).returns(T.untyped) }
  def avatar_blob_ids=(ids); end
end
