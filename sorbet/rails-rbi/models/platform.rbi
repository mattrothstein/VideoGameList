# This is an autogenerated file for dynamic methods in Platform
# Please rerun rake rails_rbi:models[Platform] to regenerate.

# typed: strong
module Platform::ActiveRelation_WhereNot
  sig { params(opts: T.untyped, rest: T.untyped).returns(T.self_type) }
  def not(opts, *rest); end
end

module Platform::CustomFinderMethods
  sig { params(limit: Integer).returns(T::Array[Platform]) }
  def first_n(limit); end

  sig { params(limit: Integer).returns(T::Array[Platform]) }
  def last_n(limit); end

  sig { params(args: T::Array[T.any(Integer, String)]).returns(T::Array[Platform]) }
  def find_n(*args); end

  sig { params(id: Integer).returns(T.nilable(Platform)) }
  def find_by_id(id); end

  sig { params(id: Integer).returns(Platform) }
  def find_by_id!(id); end
end

class Platform < ApplicationRecord
  include Platform::GeneratedAttributeMethods
  include Platform::GeneratedAssociationMethods
  extend Platform::CustomFinderMethods
  extend PgSearch::Model::ClassMethods
  extend T::Sig
  extend T::Generic

  sig { returns(Platform::ActiveRecord_Relation) }
  def self.all; end

  sig { params(block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_Relation) }
  def self.unscoped(&block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_Relation) }
  def self.select(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_Relation) }
  def self.reselect(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_Relation) }
  def self.order(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_Relation) }
  def self.reorder(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_Relation) }
  def self.group(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_Relation) }
  def self.limit(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_Relation) }
  def self.offset(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_Relation) }
  def self.joins(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_Relation) }
  def self.left_joins(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_Relation) }
  def self.left_outer_joins(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_Relation) }
  def self.where(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_Relation) }
  def self.rewhere(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_Relation) }
  def self.preload(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_Relation) }
  def self.extract_associated(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_Relation) }
  def self.eager_load(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_Relation) }
  def self.includes(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_Relation) }
  def self.from(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_Relation) }
  def self.lock(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_Relation) }
  def self.readonly(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_Relation) }
  def self.extending(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_Relation) }
  def self.or(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_Relation) }
  def self.having(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_Relation) }
  def self.create_with(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_Relation) }
  def self.distinct(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_Relation) }
  def self.references(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_Relation) }
  def self.none(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_Relation) }
  def self.unscope(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_Relation) }
  def self.optimizer_hints(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_Relation) }
  def self.merge(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_Relation) }
  def self.except(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_Relation) }
  def self.only(*args, &block); end

  sig { params(args: T.untyped).returns(Platform) }
  def self.find(*args); end

  sig { params(args: T.untyped).returns(T.nilable(Platform)) }
  def self.find_by(*args); end

  sig { params(args: T.untyped).returns(Platform) }
  def self.find_by!(*args); end

  sig { returns(T.nilable(Platform)) }
  def self.first; end

  sig { returns(Platform) }
  def self.first!; end

  sig { returns(T.nilable(Platform)) }
  def self.second; end

  sig { returns(Platform) }
  def self.second!; end

  sig { returns(T.nilable(Platform)) }
  def self.third; end

  sig { returns(Platform) }
  def self.third!; end

  sig { returns(T.nilable(Platform)) }
  def self.third_to_last; end

  sig { returns(Platform) }
  def self.third_to_last!; end

  sig { returns(T.nilable(Platform)) }
  def self.second_to_last; end

  sig { returns(Platform) }
  def self.second_to_last!; end

  sig { returns(T.nilable(Platform)) }
  def self.last; end

  sig { returns(Platform) }
  def self.last!; end

  sig { params(conditions: T.untyped).returns(T::Boolean) }
  def self.exists?(conditions = nil); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def self.any?(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def self.many?(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def self.none?(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def self.one?(*args); end

  sig { returns(T.untyped) }
  def self.after_add_for_game_platforms; end

  sig { returns(T.untyped) }
  def self.after_add_for_game_platforms?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.after_add_for_game_platforms=(val); end

  sig { returns(T.untyped) }
  def after_add_for_game_platforms; end

  sig { returns(T.untyped) }
  def after_add_for_game_platforms?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_add_for_game_platforms=(val); end

  sig { returns(T.untyped) }
  def self.after_remove_for_game_platforms; end

  sig { returns(T.untyped) }
  def self.after_remove_for_game_platforms?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.after_remove_for_game_platforms=(val); end

  sig { returns(T.untyped) }
  def after_remove_for_game_platforms; end

  sig { returns(T.untyped) }
  def after_remove_for_game_platforms?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_remove_for_game_platforms=(val); end

  sig { returns(T.untyped) }
  def self.before_add_for_game_platforms; end

  sig { returns(T.untyped) }
  def self.before_add_for_game_platforms?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.before_add_for_game_platforms=(val); end

  sig { returns(T.untyped) }
  def before_add_for_game_platforms; end

  sig { returns(T.untyped) }
  def before_add_for_game_platforms?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_add_for_game_platforms=(val); end

  sig { returns(T.untyped) }
  def self.before_remove_for_game_platforms; end

  sig { returns(T.untyped) }
  def self.before_remove_for_game_platforms?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.before_remove_for_game_platforms=(val); end

  sig { returns(T.untyped) }
  def before_remove_for_game_platforms; end

  sig { returns(T.untyped) }
  def before_remove_for_game_platforms?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_remove_for_game_platforms=(val); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def autosave_associated_records_for_game_platforms(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def validate_associated_records_for_game_platforms(*args); end

  sig { returns(T.untyped) }
  def self.after_add_for_games; end

  sig { returns(T.untyped) }
  def self.after_add_for_games?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.after_add_for_games=(val); end

  sig { returns(T.untyped) }
  def after_add_for_games; end

  sig { returns(T.untyped) }
  def after_add_for_games?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_add_for_games=(val); end

  sig { returns(T.untyped) }
  def self.after_remove_for_games; end

  sig { returns(T.untyped) }
  def self.after_remove_for_games?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.after_remove_for_games=(val); end

  sig { returns(T.untyped) }
  def after_remove_for_games; end

  sig { returns(T.untyped) }
  def after_remove_for_games?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_remove_for_games=(val); end

  sig { returns(T.untyped) }
  def self.before_add_for_games; end

  sig { returns(T.untyped) }
  def self.before_add_for_games?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.before_add_for_games=(val); end

  sig { returns(T.untyped) }
  def before_add_for_games; end

  sig { returns(T.untyped) }
  def before_add_for_games?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_add_for_games=(val); end

  sig { returns(T.untyped) }
  def self.before_remove_for_games; end

  sig { returns(T.untyped) }
  def self.before_remove_for_games?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.before_remove_for_games=(val); end

  sig { returns(T.untyped) }
  def before_remove_for_games; end

  sig { returns(T.untyped) }
  def before_remove_for_games?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_remove_for_games=(val); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def autosave_associated_records_for_games(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def validate_associated_records_for_games(*args); end

  sig { returns(T.untyped) }
  def self.after_add_for_game_purchase_platforms; end

  sig { returns(T.untyped) }
  def self.after_add_for_game_purchase_platforms?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.after_add_for_game_purchase_platforms=(val); end

  sig { returns(T.untyped) }
  def after_add_for_game_purchase_platforms; end

  sig { returns(T.untyped) }
  def after_add_for_game_purchase_platforms?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_add_for_game_purchase_platforms=(val); end

  sig { returns(T.untyped) }
  def self.after_remove_for_game_purchase_platforms; end

  sig { returns(T.untyped) }
  def self.after_remove_for_game_purchase_platforms?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.after_remove_for_game_purchase_platforms=(val); end

  sig { returns(T.untyped) }
  def after_remove_for_game_purchase_platforms; end

  sig { returns(T.untyped) }
  def after_remove_for_game_purchase_platforms?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_remove_for_game_purchase_platforms=(val); end

  sig { returns(T.untyped) }
  def self.before_add_for_game_purchase_platforms; end

  sig { returns(T.untyped) }
  def self.before_add_for_game_purchase_platforms?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.before_add_for_game_purchase_platforms=(val); end

  sig { returns(T.untyped) }
  def before_add_for_game_purchase_platforms; end

  sig { returns(T.untyped) }
  def before_add_for_game_purchase_platforms?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_add_for_game_purchase_platforms=(val); end

  sig { returns(T.untyped) }
  def self.before_remove_for_game_purchase_platforms; end

  sig { returns(T.untyped) }
  def self.before_remove_for_game_purchase_platforms?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.before_remove_for_game_purchase_platforms=(val); end

  sig { returns(T.untyped) }
  def before_remove_for_game_purchase_platforms; end

  sig { returns(T.untyped) }
  def before_remove_for_game_purchase_platforms?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_remove_for_game_purchase_platforms=(val); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def autosave_associated_records_for_game_purchase_platforms(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def validate_associated_records_for_game_purchase_platforms(*args); end

  sig { returns(T.untyped) }
  def self.after_add_for_game_purchases; end

  sig { returns(T.untyped) }
  def self.after_add_for_game_purchases?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.after_add_for_game_purchases=(val); end

  sig { returns(T.untyped) }
  def after_add_for_game_purchases; end

  sig { returns(T.untyped) }
  def after_add_for_game_purchases?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_add_for_game_purchases=(val); end

  sig { returns(T.untyped) }
  def self.after_remove_for_game_purchases; end

  sig { returns(T.untyped) }
  def self.after_remove_for_game_purchases?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.after_remove_for_game_purchases=(val); end

  sig { returns(T.untyped) }
  def after_remove_for_game_purchases; end

  sig { returns(T.untyped) }
  def after_remove_for_game_purchases?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_remove_for_game_purchases=(val); end

  sig { returns(T.untyped) }
  def self.before_add_for_game_purchases; end

  sig { returns(T.untyped) }
  def self.before_add_for_game_purchases?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.before_add_for_game_purchases=(val); end

  sig { returns(T.untyped) }
  def before_add_for_game_purchases; end

  sig { returns(T.untyped) }
  def before_add_for_game_purchases?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_add_for_game_purchases=(val); end

  sig { returns(T.untyped) }
  def self.before_remove_for_game_purchases; end

  sig { returns(T.untyped) }
  def self.before_remove_for_game_purchases?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.before_remove_for_game_purchases=(val); end

  sig { returns(T.untyped) }
  def before_remove_for_game_purchases; end

  sig { returns(T.untyped) }
  def before_remove_for_game_purchases?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_remove_for_game_purchases=(val); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def autosave_associated_records_for_game_purchases(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def validate_associated_records_for_game_purchases(*args); end

  sig { returns(T.untyped) }
  def self.after_add_for_pg_search_document; end

  sig { returns(T.untyped) }
  def self.after_add_for_pg_search_document?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.after_add_for_pg_search_document=(val); end

  sig { returns(T.untyped) }
  def after_add_for_pg_search_document; end

  sig { returns(T.untyped) }
  def after_add_for_pg_search_document?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_add_for_pg_search_document=(val); end

  sig { returns(T.untyped) }
  def self.after_remove_for_pg_search_document; end

  sig { returns(T.untyped) }
  def self.after_remove_for_pg_search_document?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.after_remove_for_pg_search_document=(val); end

  sig { returns(T.untyped) }
  def after_remove_for_pg_search_document; end

  sig { returns(T.untyped) }
  def after_remove_for_pg_search_document?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_remove_for_pg_search_document=(val); end

  sig { returns(T.untyped) }
  def self.before_add_for_pg_search_document; end

  sig { returns(T.untyped) }
  def self.before_add_for_pg_search_document?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.before_add_for_pg_search_document=(val); end

  sig { returns(T.untyped) }
  def before_add_for_pg_search_document; end

  sig { returns(T.untyped) }
  def before_add_for_pg_search_document?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_add_for_pg_search_document=(val); end

  sig { returns(T.untyped) }
  def self.before_remove_for_pg_search_document; end

  sig { returns(T.untyped) }
  def self.before_remove_for_pg_search_document?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.before_remove_for_pg_search_document=(val); end

  sig { returns(T.untyped) }
  def before_remove_for_pg_search_document; end

  sig { returns(T.untyped) }
  def before_remove_for_pg_search_document?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_remove_for_pg_search_document=(val); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def autosave_associated_records_for_pg_search_document(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def validate_associated_records_for_pg_search_document(*args); end

  sig { params(num: T.nilable(Integer)).returns(Platform::ActiveRecord_Relation) }
  def self.page(num = nil); end
end

class Platform::ActiveRecord_Relation < ActiveRecord::Relation
  include Platform::ActiveRelation_WhereNot
  include Platform::CustomFinderMethods
  include Enumerable
  extend T::Sig
  extend T::Generic
  Elem = type_member(fixed: Platform)

  sig { returns(Platform::ActiveRecord_Relation) }
  def all; end

  sig { params(block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_Relation) }
  def unscoped(&block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_Relation) }
  def select(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_Relation) }
  def reselect(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_Relation) }
  def order(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_Relation) }
  def reorder(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_Relation) }
  def group(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_Relation) }
  def limit(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_Relation) }
  def offset(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_Relation) }
  def joins(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_Relation) }
  def left_joins(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_Relation) }
  def left_outer_joins(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_Relation) }
  def where(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_Relation) }
  def rewhere(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_Relation) }
  def preload(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_Relation) }
  def extract_associated(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_Relation) }
  def eager_load(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_Relation) }
  def includes(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_Relation) }
  def from(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_Relation) }
  def lock(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_Relation) }
  def readonly(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_Relation) }
  def extending(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_Relation) }
  def or(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_Relation) }
  def having(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_Relation) }
  def create_with(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_Relation) }
  def distinct(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_Relation) }
  def references(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_Relation) }
  def none(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_Relation) }
  def unscope(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_Relation) }
  def optimizer_hints(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_Relation) }
  def merge(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_Relation) }
  def except(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_Relation) }
  def only(*args, &block); end

  sig { params(args: T.untyped).returns(Platform) }
  def find(*args); end

  sig { params(args: T.untyped).returns(T.nilable(Platform)) }
  def find_by(*args); end

  sig { params(args: T.untyped).returns(Platform) }
  def find_by!(*args); end

  sig { returns(T.nilable(Platform)) }
  def first; end

  sig { returns(Platform) }
  def first!; end

  sig { returns(T.nilable(Platform)) }
  def second; end

  sig { returns(Platform) }
  def second!; end

  sig { returns(T.nilable(Platform)) }
  def third; end

  sig { returns(Platform) }
  def third!; end

  sig { returns(T.nilable(Platform)) }
  def third_to_last; end

  sig { returns(Platform) }
  def third_to_last!; end

  sig { returns(T.nilable(Platform)) }
  def second_to_last; end

  sig { returns(Platform) }
  def second_to_last!; end

  sig { returns(T.nilable(Platform)) }
  def last; end

  sig { returns(Platform) }
  def last!; end

  sig { params(conditions: T.untyped).returns(T::Boolean) }
  def exists?(conditions = nil); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def any?(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def many?(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def none?(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def one?(*args); end

  sig { override.params(block: T.proc.params(e: Platform).void).void }
  def each(&block); end

  sig { params(level: T.nilable(Integer)).returns(T::Array[Platform]) }
  def flatten(level); end

  sig { returns(T::Array[Platform]) }
  def to_a; end

  sig do
    type_parameters(:U).params(
        blk: T.proc.params(arg0: Elem).returns(T.type_parameter(:U)),
    )
    .returns(T::Array[T.type_parameter(:U)])
  end
  def map(&blk); end

  sig { params(num: T.nilable(Integer)).returns(Platform::ActiveRecord_Relation) }
  def page(num = nil); end
end

class Platform::ActiveRecord_AssociationRelation < ActiveRecord::AssociationRelation
  include Platform::ActiveRelation_WhereNot
  include Platform::CustomFinderMethods
  include Enumerable
  extend T::Sig
  extend T::Generic
  Elem = type_member(fixed: Platform)

  sig { returns(Platform::ActiveRecord_AssociationRelation) }
  def all; end

  sig { params(block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_AssociationRelation) }
  def unscoped(&block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_AssociationRelation) }
  def select(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_AssociationRelation) }
  def reselect(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_AssociationRelation) }
  def order(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_AssociationRelation) }
  def reorder(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_AssociationRelation) }
  def group(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_AssociationRelation) }
  def limit(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_AssociationRelation) }
  def offset(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_AssociationRelation) }
  def joins(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_AssociationRelation) }
  def left_joins(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_AssociationRelation) }
  def left_outer_joins(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_AssociationRelation) }
  def where(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_AssociationRelation) }
  def rewhere(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_AssociationRelation) }
  def preload(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_AssociationRelation) }
  def extract_associated(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_AssociationRelation) }
  def eager_load(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_AssociationRelation) }
  def includes(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_AssociationRelation) }
  def from(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_AssociationRelation) }
  def lock(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_AssociationRelation) }
  def readonly(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_AssociationRelation) }
  def extending(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_AssociationRelation) }
  def or(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_AssociationRelation) }
  def having(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_AssociationRelation) }
  def create_with(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_AssociationRelation) }
  def distinct(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_AssociationRelation) }
  def references(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_AssociationRelation) }
  def none(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_AssociationRelation) }
  def unscope(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_AssociationRelation) }
  def optimizer_hints(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_AssociationRelation) }
  def merge(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_AssociationRelation) }
  def except(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_AssociationRelation) }
  def only(*args, &block); end

  sig { params(args: T.untyped).returns(Platform) }
  def find(*args); end

  sig { params(args: T.untyped).returns(T.nilable(Platform)) }
  def find_by(*args); end

  sig { params(args: T.untyped).returns(Platform) }
  def find_by!(*args); end

  sig { returns(T.nilable(Platform)) }
  def first; end

  sig { returns(Platform) }
  def first!; end

  sig { returns(T.nilable(Platform)) }
  def second; end

  sig { returns(Platform) }
  def second!; end

  sig { returns(T.nilable(Platform)) }
  def third; end

  sig { returns(Platform) }
  def third!; end

  sig { returns(T.nilable(Platform)) }
  def third_to_last; end

  sig { returns(Platform) }
  def third_to_last!; end

  sig { returns(T.nilable(Platform)) }
  def second_to_last; end

  sig { returns(Platform) }
  def second_to_last!; end

  sig { returns(T.nilable(Platform)) }
  def last; end

  sig { returns(Platform) }
  def last!; end

  sig { params(conditions: T.untyped).returns(T::Boolean) }
  def exists?(conditions = nil); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def any?(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def many?(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def none?(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def one?(*args); end

  sig { override.params(block: T.proc.params(e: Platform).void).void }
  def each(&block); end

  sig { params(level: T.nilable(Integer)).returns(T::Array[Platform]) }
  def flatten(level); end

  sig { returns(T::Array[Platform]) }
  def to_a; end

  sig do
    type_parameters(:U).params(
        blk: T.proc.params(arg0: Elem).returns(T.type_parameter(:U)),
    )
    .returns(T::Array[T.type_parameter(:U)])
  end
  def map(&blk); end

  sig { params(num: T.nilable(Integer)).returns(Platform::ActiveRecord_AssociationRelation) }
  def page(num = nil); end
end

class Platform::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  include Platform::CustomFinderMethods
  include Enumerable
  extend T::Sig
  extend T::Generic
  Elem = type_member(fixed: Platform)

  sig { returns(Platform::ActiveRecord_AssociationRelation) }
  def all; end

  sig { params(block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_AssociationRelation) }
  def unscoped(&block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_AssociationRelation) }
  def select(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_AssociationRelation) }
  def reselect(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_AssociationRelation) }
  def order(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_AssociationRelation) }
  def reorder(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_AssociationRelation) }
  def group(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_AssociationRelation) }
  def limit(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_AssociationRelation) }
  def offset(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_AssociationRelation) }
  def joins(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_AssociationRelation) }
  def left_joins(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_AssociationRelation) }
  def left_outer_joins(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_AssociationRelation) }
  def where(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_AssociationRelation) }
  def rewhere(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_AssociationRelation) }
  def preload(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_AssociationRelation) }
  def extract_associated(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_AssociationRelation) }
  def eager_load(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_AssociationRelation) }
  def includes(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_AssociationRelation) }
  def from(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_AssociationRelation) }
  def lock(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_AssociationRelation) }
  def readonly(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_AssociationRelation) }
  def extending(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_AssociationRelation) }
  def or(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_AssociationRelation) }
  def having(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_AssociationRelation) }
  def create_with(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_AssociationRelation) }
  def distinct(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_AssociationRelation) }
  def references(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_AssociationRelation) }
  def none(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_AssociationRelation) }
  def unscope(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_AssociationRelation) }
  def optimizer_hints(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_AssociationRelation) }
  def merge(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_AssociationRelation) }
  def except(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Platform::ActiveRecord_AssociationRelation) }
  def only(*args, &block); end

  sig { params(args: T.untyped).returns(Platform) }
  def find(*args); end

  sig { params(args: T.untyped).returns(T.nilable(Platform)) }
  def find_by(*args); end

  sig { params(args: T.untyped).returns(Platform) }
  def find_by!(*args); end

  sig { returns(T.nilable(Platform)) }
  def first; end

  sig { returns(Platform) }
  def first!; end

  sig { returns(T.nilable(Platform)) }
  def second; end

  sig { returns(Platform) }
  def second!; end

  sig { returns(T.nilable(Platform)) }
  def third; end

  sig { returns(Platform) }
  def third!; end

  sig { returns(T.nilable(Platform)) }
  def third_to_last; end

  sig { returns(Platform) }
  def third_to_last!; end

  sig { returns(T.nilable(Platform)) }
  def second_to_last; end

  sig { returns(Platform) }
  def second_to_last!; end

  sig { returns(T.nilable(Platform)) }
  def last; end

  sig { returns(Platform) }
  def last!; end

  sig { params(conditions: T.untyped).returns(T::Boolean) }
  def exists?(conditions = nil); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def any?(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def many?(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def none?(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def one?(*args); end

  sig { override.params(block: T.proc.params(e: Platform).void).void }
  def each(&block); end

  sig { params(level: T.nilable(Integer)).returns(T::Array[Platform]) }
  def flatten(level); end

  sig { returns(T::Array[Platform]) }
  def to_a; end

  sig do
    type_parameters(:U).params(
        blk: T.proc.params(arg0: Elem).returns(T.type_parameter(:U)),
    )
    .returns(T::Array[T.type_parameter(:U)])
  end
  def map(&blk); end

  sig { params(records: T.any(Platform, T::Array[Platform])).returns(T.self_type) }
  def <<(*records); end

  sig { params(records: T.any(Platform, T::Array[Platform])).returns(T.self_type) }
  def append(*records); end

  sig { params(records: T.any(Platform, T::Array[Platform])).returns(T.self_type) }
  def push(*records); end

  sig { params(records: T.any(Platform, T::Array[Platform])).returns(T.self_type) }
  def concat(*records); end

  sig { params(num: T.nilable(Integer)).returns(Platform::ActiveRecord_AssociationRelation) }
  def page(num = nil); end
end

module Platform::GeneratedAttributeMethods
  extend T::Sig

  sig { returns(DateTime) }
  def created_at; end

  sig { params(value: DateTime).void }
  def created_at=(value); end

  sig { returns(T::Boolean) }
  def created_at?; end

  sig { returns(String) }
  def description; end

  sig { params(value: String).void }
  def description=(value); end

  sig { returns(T::Boolean) }
  def description?; end

  sig { returns(Integer) }
  def id; end

  sig { params(value: Integer).void }
  def id=(value); end

  sig { returns(T::Boolean) }
  def id?; end

  sig { returns(String) }
  def name; end

  sig { params(value: String).void }
  def name=(value); end

  sig { returns(T::Boolean) }
  def name?; end

  sig { returns(DateTime) }
  def updated_at; end

  sig { params(value: DateTime).void }
  def updated_at=(value); end

  sig { returns(T::Boolean) }
  def updated_at?; end

  sig { returns(T.nilable(Integer)) }
  def wikidata_id; end

  sig { params(value: T.nilable(Integer)).void }
  def wikidata_id=(value); end

  sig { returns(T::Boolean) }
  def wikidata_id?; end

  sig { params(args: T.untyped).returns(T.untyped) }
  def saved_change_to_id?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def saved_change_to_id(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def id_before_last_save(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def will_save_change_to_id?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def id_change_to_be_saved(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def id_in_database(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def id_changed?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def id_change(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def id_will_change!(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def id_was(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def id_previously_changed?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def id_previous_change(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def restore_id!(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def id_before_type_cast(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def id_came_from_user?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def saved_change_to_name?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def saved_change_to_name(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def name_before_last_save(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def will_save_change_to_name?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def name_change_to_be_saved(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def name_in_database(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def name_changed?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def name_change(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def name_will_change!(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def name_was(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def name_previously_changed?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def name_previous_change(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def restore_name!(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def name_before_type_cast(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def name_came_from_user?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def saved_change_to_description?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def saved_change_to_description(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def description_before_last_save(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def will_save_change_to_description?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def description_change_to_be_saved(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def description_in_database(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def description_changed?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def description_change(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def description_will_change!(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def description_was(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def description_previously_changed?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def description_previous_change(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def restore_description!(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def description_before_type_cast(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def description_came_from_user?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def saved_change_to_created_at?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def saved_change_to_created_at(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def created_at_before_last_save(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def will_save_change_to_created_at?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def created_at_change_to_be_saved(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def created_at_in_database(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def created_at_changed?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def created_at_change(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def created_at_will_change!(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def created_at_was(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def created_at_previously_changed?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def created_at_previous_change(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def restore_created_at!(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def created_at_before_type_cast(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def created_at_came_from_user?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def saved_change_to_updated_at?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def saved_change_to_updated_at(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def updated_at_before_last_save(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def will_save_change_to_updated_at?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def updated_at_change_to_be_saved(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def updated_at_in_database(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def updated_at_changed?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def updated_at_change(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def updated_at_will_change!(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def updated_at_was(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def updated_at_previously_changed?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def updated_at_previous_change(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def restore_updated_at!(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def updated_at_before_type_cast(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def updated_at_came_from_user?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def saved_change_to_wikidata_id?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def saved_change_to_wikidata_id(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def wikidata_id_before_last_save(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def will_save_change_to_wikidata_id?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def wikidata_id_change_to_be_saved(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def wikidata_id_in_database(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def wikidata_id_changed?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def wikidata_id_change(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def wikidata_id_will_change!(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def wikidata_id_was(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def wikidata_id_previously_changed?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def wikidata_id_previous_change(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def restore_wikidata_id!(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def wikidata_id_before_type_cast(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def wikidata_id_came_from_user?(*args); end
end

module Platform::GeneratedAssociationMethods
  extend T::Sig

  sig { returns(::GamePlatform::ActiveRecord_Associations_CollectionProxy) }
  def game_platforms; end

  sig { params(value: T.any(T::Array[::GamePlatform], ::GamePlatform::ActiveRecord_Associations_CollectionProxy)).void }
  def game_platforms=(value); end

  sig { returns(::GamePurchasePlatform::ActiveRecord_Associations_CollectionProxy) }
  def game_purchase_platforms; end

  sig { params(value: T.any(T::Array[::GamePurchasePlatform], ::GamePurchasePlatform::ActiveRecord_Associations_CollectionProxy)).void }
  def game_purchase_platforms=(value); end

  sig { returns(::GamePurchase::ActiveRecord_Associations_CollectionProxy) }
  def game_purchases; end

  sig { params(value: T.any(T::Array[::GamePurchase], ::GamePurchase::ActiveRecord_Associations_CollectionProxy)).void }
  def game_purchases=(value); end

  sig { returns(::Game::ActiveRecord_Associations_CollectionProxy) }
  def games; end

  sig { params(value: T.any(T::Array[::Game], ::Game::ActiveRecord_Associations_CollectionProxy)).void }
  def games=(value); end

  sig { returns(T.nilable(::PgSearch::Document)) }
  def pg_search_document; end

  sig { params(value: T.nilable(::PgSearch::Document)).void }
  def pg_search_document=(value); end

  sig { returns(T.untyped) }
  def game_platform_ids; end

  sig { params(ids: T.untyped).returns(T.untyped) }
  def game_platform_ids=(ids); end

  sig { returns(T.untyped) }
  def game_ids; end

  sig { params(ids: T.untyped).returns(T.untyped) }
  def game_ids=(ids); end

  sig { returns(T.untyped) }
  def game_purchase_platform_ids; end

  sig { params(ids: T.untyped).returns(T.untyped) }
  def game_purchase_platform_ids=(ids); end

  sig { returns(T.untyped) }
  def game_purchase_ids; end

  sig { params(ids: T.untyped).returns(T.untyped) }
  def game_purchase_ids=(ids); end

  sig { params(args: T.untyped, block: T.untyped).returns(T.untyped) }
  def build_pg_search_document(*args, &block); end

  sig { params(args: T.untyped, block: T.untyped).returns(T.untyped) }
  def create_pg_search_document(*args, &block); end

  sig { params(args: T.untyped, block: T.untyped).returns(T.untyped) }
  def create_pg_search_document!(*args, &block); end

  sig { returns(T.untyped) }
  def reload_pg_search_document; end

  sig { returns(T.untyped) }
  def pg_search_document_ids; end

  sig { params(ids: T.untyped).returns(T.untyped) }
  def pg_search_document_ids=(ids); end
end
