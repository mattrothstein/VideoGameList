# This is an autogenerated file for dynamic methods in ActiveStorage::Blob
# Please rerun rake rails_rbi:models[ActiveStorage::Blob] to regenerate.

# typed: strong
module ActiveStorage::Blob::GeneratedAttributeMethods
  extend T::Sig

  sig { returns(Integer) }
  def byte_size; end

  sig { params(value: Integer).void }
  def byte_size=(value); end

  sig { returns(T::Boolean) }
  def byte_size?; end

  sig { returns(String) }
  def checksum; end

  sig { params(value: String).void }
  def checksum=(value); end

  sig { returns(T::Boolean) }
  def checksum?; end

  sig { returns(T.nilable(String)) }
  def content_type; end

  sig { params(value: T.nilable(String)).void }
  def content_type=(value); end

  sig { returns(T::Boolean) }
  def content_type?; end

  sig { returns(DateTime) }
  def created_at; end

  sig { params(value: DateTime).void }
  def created_at=(value); end

  sig { returns(T::Boolean) }
  def created_at?; end

  sig { returns(String) }
  def filename; end

  sig { params(value: String).void }
  def filename=(value); end

  sig { returns(T::Boolean) }
  def filename?; end

  sig { returns(Integer) }
  def id; end

  sig { params(value: Integer).void }
  def id=(value); end

  sig { returns(T::Boolean) }
  def id?; end

  sig { returns(String) }
  def key; end

  sig { params(value: String).void }
  def key=(value); end

  sig { returns(T::Boolean) }
  def key?; end

  sig { returns(T.nilable(String)) }
  def metadata; end

  sig { params(value: T.nilable(String)).void }
  def metadata=(value); end

  sig { returns(T::Boolean) }
  def metadata?; end
end

module Kaminari::ActiveRecordModelExtension
  sig { params(num: Integer).returns(ActiveStorage::Blob::ActiveRecord_Relation) }
  def page(num = nil); end
end

class ActiveStorage::Blob::ActiveRecord_Relation < ActiveRecord::Relation
  include ActiveStorage::Blob::ModelRelationShared
  extend T::Sig
  extend T::Generic
  Elem = type_member(fixed: ActiveStorage::Blob)
end

class ActiveStorage::Blob::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  include ActiveStorage::Blob::ModelRelationShared
  extend T::Sig
  extend T::Generic
  Elem = type_member(fixed: ActiveStorage::Blob)
end

module ActiveStorage::Blob::ModelRelationShared
  include Kaminari::ActiveRecordModelExtension
  extend T::Sig

  sig { params(args: T.untyped).returns(ActiveStorage::Blob::ActiveRecord_Relation) }
  def unattached(*args); end

  sig { params(args: T.untyped).returns(ActiveStorage::Blob::ActiveRecord_Relation) }
  def with_attached_preview_image(*args); end

  sig { returns(ActiveStorage::Blob::ActiveRecord_Relation) }
  def all; end

  sig { params(block: T.nilable(T.proc.void)).returns(ActiveStorage::Blob::ActiveRecord_Relation) }
  def unscoped(&block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(ActiveStorage::Blob::ActiveRecord_Relation) }
  def select(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(ActiveStorage::Blob::ActiveRecord_Relation) }
  def order(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(ActiveStorage::Blob::ActiveRecord_Relation) }
  def reorder(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(ActiveStorage::Blob::ActiveRecord_Relation) }
  def group(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(ActiveStorage::Blob::ActiveRecord_Relation) }
  def limit(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(ActiveStorage::Blob::ActiveRecord_Relation) }
  def offset(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(ActiveStorage::Blob::ActiveRecord_Relation) }
  def joins(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(ActiveStorage::Blob::ActiveRecord_Relation) }
  def left_joins(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(ActiveStorage::Blob::ActiveRecord_Relation) }
  def left_outer_joins(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(ActiveStorage::Blob::ActiveRecord_Relation) }
  def where(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(ActiveStorage::Blob::ActiveRecord_Relation) }
  def rewhere(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(ActiveStorage::Blob::ActiveRecord_Relation) }
  def preload(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(ActiveStorage::Blob::ActiveRecord_Relation) }
  def eager_load(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(ActiveStorage::Blob::ActiveRecord_Relation) }
  def includes(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(ActiveStorage::Blob::ActiveRecord_Relation) }
  def from(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(ActiveStorage::Blob::ActiveRecord_Relation) }
  def lock(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(ActiveStorage::Blob::ActiveRecord_Relation) }
  def readonly(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(ActiveStorage::Blob::ActiveRecord_Relation) }
  def extending(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(ActiveStorage::Blob::ActiveRecord_Relation) }
  def or(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(ActiveStorage::Blob::ActiveRecord_Relation) }
  def having(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(ActiveStorage::Blob::ActiveRecord_Relation) }
  def create_with(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(ActiveStorage::Blob::ActiveRecord_Relation) }
  def distinct(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(ActiveStorage::Blob::ActiveRecord_Relation) }
  def references(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(ActiveStorage::Blob::ActiveRecord_Relation) }
  def none(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(ActiveStorage::Blob::ActiveRecord_Relation) }
  def unscope(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(ActiveStorage::Blob::ActiveRecord_Relation) }
  def merge(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(ActiveStorage::Blob::ActiveRecord_Relation) }
  def except(*args, &block); end
end

class ActiveStorage::Blob < ActiveRecord::Base
  include ActiveStorage::Blob::GeneratedAttributeMethods
  include ActiveStorage::Blob::GeneratedAssociationMethods
  extend T::Sig
  extend T::Generic
  extend ActiveStorage::Blob::ModelRelationShared
  Elem = type_template(fixed: ActiveStorage::Blob)

  sig { params(args: T.untyped).returns(T.untyped) }
  def autosave_associated_records_for_preview_image_attachment(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def validate_associated_records_for_preview_image_attachment(*args); end

  sig { returns(T.untyped) }
  def after_add_for_preview_image_blob; end

  sig { returns(T.untyped) }
  def after_add_for_preview_image_blob?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_add_for_preview_image_blob=(val); end

  sig { returns(T.untyped) }
  def after_remove_for_preview_image_blob; end

  sig { returns(T.untyped) }
  def after_remove_for_preview_image_blob?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_remove_for_preview_image_blob=(val); end

  sig { returns(T.untyped) }
  def before_add_for_preview_image_blob; end

  sig { returns(T.untyped) }
  def before_add_for_preview_image_blob?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_add_for_preview_image_blob=(val); end

  sig { returns(T.untyped) }
  def before_remove_for_preview_image_blob; end

  sig { returns(T.untyped) }
  def before_remove_for_preview_image_blob?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_remove_for_preview_image_blob=(val); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def autosave_associated_records_for_preview_image_blob(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def validate_associated_records_for_preview_image_blob(*args); end

  sig { returns(T.untyped) }
  def after_add_for_attachments; end

  sig { returns(T.untyped) }
  def after_add_for_attachments?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_add_for_attachments=(val); end

  sig { returns(T.untyped) }
  def after_remove_for_attachments; end

  sig { returns(T.untyped) }
  def after_remove_for_attachments?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_remove_for_attachments=(val); end

  sig { returns(T.untyped) }
  def before_add_for_attachments; end

  sig { returns(T.untyped) }
  def before_add_for_attachments?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_add_for_attachments=(val); end

  sig { returns(T.untyped) }
  def before_remove_for_attachments; end

  sig { returns(T.untyped) }
  def before_remove_for_attachments?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_remove_for_attachments=(val); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def autosave_associated_records_for_attachments(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def validate_associated_records_for_attachments(*args); end
end

module ActiveStorage::Blob::GeneratedAssociationMethods
  extend T::Sig

  sig { returns(::ActiveStorage::Attachment::ActiveRecord_Associations_CollectionProxy) }
  def attachments; end

  sig { params(value: T.any(T::Array[::ActiveStorage::Attachment], ::ActiveStorage::Attachment::ActiveRecord_Associations_CollectionProxy)).void }
  def attachments=(value); end

  sig { returns(T.nilable(::ActiveStorage::Attachment)) }
  def preview_image_attachment; end

  sig { params(value: T.nilable(::ActiveStorage::Attachment)).void }
  def preview_image_attachment=(value); end

  sig { returns(T.nilable(::ActiveStorage::Blob)) }
  def preview_image_blob; end

  sig { params(value: T.nilable(::ActiveStorage::Blob)).void }
  def preview_image_blob=(value); end

  sig { params(args: T.untyped, block: T.untyped).returns(T.untyped) }
  def build_preview_image_attachment(*args, &block); end

  sig { params(args: T.untyped, block: T.untyped).returns(T.untyped) }
  def create_preview_image_attachment(*args, &block); end

  sig { params(args: T.untyped, block: T.untyped).returns(T.untyped) }
  def create_preview_image_attachment!(*args, &block); end

  sig { returns(T.untyped) }
  def reload_preview_image_attachment; end

  sig { returns(T.untyped) }
  def preview_image_blob_ids; end

  sig { params(ids: T.untyped).returns(T.untyped) }
  def preview_image_blob_ids=(ids); end

  sig { returns(T.untyped) }
  def attachment_ids; end

  sig { params(ids: T.untyped).returns(T.untyped) }
  def attachment_ids=(ids); end
end
