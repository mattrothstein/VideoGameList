# This is an autogenerated file for dynamic methods in Game
# Please rerun rake rails_rbi:models[Game] to regenerate.

# typed: strong
module Game::GeneratedAttributeMethods
  extend T::Sig

  sig { returns(DateTime) }
  def created_at; end

  sig { params(value: DateTime).void }
  def created_at=(value); end

  sig { returns(T::Boolean) }
  def created_at?; end

  sig { returns(String) }
  def description; end

  sig { params(value: String).void }
  def description=(value); end

  sig { returns(T::Boolean) }
  def description?; end

  sig { returns(Integer) }
  def id; end

  sig { params(value: Integer).void }
  def id=(value); end

  sig { returns(T::Boolean) }
  def id?; end

  sig { returns(T.nilable(String)) }
  def mobygames_id; end

  sig { params(value: T.nilable(String)).void }
  def mobygames_id=(value); end

  sig { returns(T::Boolean) }
  def mobygames_id?; end

  sig { returns(String) }
  def name; end

  sig { params(value: String).void }
  def name=(value); end

  sig { returns(T::Boolean) }
  def name?; end

  sig { returns(T.nilable(String)) }
  def pcgamingwiki_id; end

  sig { params(value: T.nilable(String)).void }
  def pcgamingwiki_id=(value); end

  sig { returns(T::Boolean) }
  def pcgamingwiki_id?; end

  sig { returns(T.nilable(Integer)) }
  def series_id; end

  sig { params(value: T.nilable(Integer)).void }
  def series_id=(value); end

  sig { returns(T::Boolean) }
  def series_id?; end

  sig { returns(T.nilable(Integer)) }
  def steam_app_id; end

  sig { params(value: T.nilable(Integer)).void }
  def steam_app_id=(value); end

  sig { returns(T::Boolean) }
  def steam_app_id?; end

  sig { returns(DateTime) }
  def updated_at; end

  sig { params(value: DateTime).void }
  def updated_at=(value); end

  sig { returns(T::Boolean) }
  def updated_at?; end

  sig { returns(T.nilable(Integer)) }
  def wikidata_id; end

  sig { params(value: T.nilable(Integer)).void }
  def wikidata_id=(value); end

  sig { returns(T::Boolean) }
  def wikidata_id?; end
end

module Kaminari::ActiveRecordModelExtension
  sig { params(num: Integer).returns(Game::ActiveRecord_Relation) }
  def page(num = nil); end
end

class Game::ActiveRecord_Relation < ActiveRecord::Relation
  include Game::ModelRelationShared
  extend T::Sig
  extend T::Generic
  Elem = type_member(fixed: Game)
end

class Game::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  include Game::ModelRelationShared
  extend T::Sig
  extend T::Generic
  Elem = type_member(fixed: Game)
end

module Game::ModelRelationShared
  include Kaminari::ActiveRecordModelExtension
  extend T::Sig

  sig { params(args: T.untyped).returns(Game::ActiveRecord_Relation) }
  def least_recently_updated(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_Relation) }
  def most_favorites(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_Relation) }
  def most_owners(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_Relation) }
  def newest(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_Relation) }
  def oldest(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_Relation) }
  def on_platform(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_Relation) }
  def recently_updated(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_Relation) }
  def with_attached_cover(*args); end

  sig { returns(Game::ActiveRecord_Relation) }
  def all; end

  sig { params(block: T.nilable(T.proc.void)).returns(Game::ActiveRecord_Relation) }
  def unscoped(&block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Game::ActiveRecord_Relation) }
  def select(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Game::ActiveRecord_Relation) }
  def order(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Game::ActiveRecord_Relation) }
  def reorder(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Game::ActiveRecord_Relation) }
  def group(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Game::ActiveRecord_Relation) }
  def limit(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Game::ActiveRecord_Relation) }
  def offset(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Game::ActiveRecord_Relation) }
  def joins(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Game::ActiveRecord_Relation) }
  def left_joins(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Game::ActiveRecord_Relation) }
  def left_outer_joins(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Game::ActiveRecord_Relation) }
  def where(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Game::ActiveRecord_Relation) }
  def rewhere(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Game::ActiveRecord_Relation) }
  def preload(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Game::ActiveRecord_Relation) }
  def eager_load(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Game::ActiveRecord_Relation) }
  def includes(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Game::ActiveRecord_Relation) }
  def from(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Game::ActiveRecord_Relation) }
  def lock(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Game::ActiveRecord_Relation) }
  def readonly(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Game::ActiveRecord_Relation) }
  def extending(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Game::ActiveRecord_Relation) }
  def or(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Game::ActiveRecord_Relation) }
  def having(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Game::ActiveRecord_Relation) }
  def create_with(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Game::ActiveRecord_Relation) }
  def distinct(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Game::ActiveRecord_Relation) }
  def references(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Game::ActiveRecord_Relation) }
  def none(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Game::ActiveRecord_Relation) }
  def unscope(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Game::ActiveRecord_Relation) }
  def merge(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Game::ActiveRecord_Relation) }
  def except(*args, &block); end
end

class Game < ApplicationRecord
  include Game::GeneratedAttributeMethods
  include Game::GeneratedAssociationMethods
  extend PgSearch::Model::ClassMethods
  extend T::Sig
  extend T::Generic
  extend Game::ModelRelationShared
  Elem = type_template(fixed: Game)

  sig { returns(T.untyped) }
  def after_add_for_game_purchases; end

  sig { returns(T.untyped) }
  def after_add_for_game_purchases?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_add_for_game_purchases=(val); end

  sig { returns(T.untyped) }
  def after_remove_for_game_purchases; end

  sig { returns(T.untyped) }
  def after_remove_for_game_purchases?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_remove_for_game_purchases=(val); end

  sig { returns(T.untyped) }
  def before_add_for_game_purchases; end

  sig { returns(T.untyped) }
  def before_add_for_game_purchases?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_add_for_game_purchases=(val); end

  sig { returns(T.untyped) }
  def before_remove_for_game_purchases; end

  sig { returns(T.untyped) }
  def before_remove_for_game_purchases?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_remove_for_game_purchases=(val); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def autosave_associated_records_for_game_purchases(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def validate_associated_records_for_game_purchases(*args); end

  sig { returns(T.untyped) }
  def after_add_for_purchasers; end

  sig { returns(T.untyped) }
  def after_add_for_purchasers?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_add_for_purchasers=(val); end

  sig { returns(T.untyped) }
  def after_remove_for_purchasers; end

  sig { returns(T.untyped) }
  def after_remove_for_purchasers?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_remove_for_purchasers=(val); end

  sig { returns(T.untyped) }
  def before_add_for_purchasers; end

  sig { returns(T.untyped) }
  def before_add_for_purchasers?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_add_for_purchasers=(val); end

  sig { returns(T.untyped) }
  def before_remove_for_purchasers; end

  sig { returns(T.untyped) }
  def before_remove_for_purchasers?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_remove_for_purchasers=(val); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def autosave_associated_records_for_purchasers(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def validate_associated_records_for_purchasers(*args); end

  sig { returns(T.untyped) }
  def after_add_for_game_developers; end

  sig { returns(T.untyped) }
  def after_add_for_game_developers?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_add_for_game_developers=(val); end

  sig { returns(T.untyped) }
  def after_remove_for_game_developers; end

  sig { returns(T.untyped) }
  def after_remove_for_game_developers?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_remove_for_game_developers=(val); end

  sig { returns(T.untyped) }
  def before_add_for_game_developers; end

  sig { returns(T.untyped) }
  def before_add_for_game_developers?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_add_for_game_developers=(val); end

  sig { returns(T.untyped) }
  def before_remove_for_game_developers; end

  sig { returns(T.untyped) }
  def before_remove_for_game_developers?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_remove_for_game_developers=(val); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def autosave_associated_records_for_game_developers(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def validate_associated_records_for_game_developers(*args); end

  sig { returns(T.untyped) }
  def after_add_for_developers; end

  sig { returns(T.untyped) }
  def after_add_for_developers?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_add_for_developers=(val); end

  sig { returns(T.untyped) }
  def after_remove_for_developers; end

  sig { returns(T.untyped) }
  def after_remove_for_developers?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_remove_for_developers=(val); end

  sig { returns(T.untyped) }
  def before_add_for_developers; end

  sig { returns(T.untyped) }
  def before_add_for_developers?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_add_for_developers=(val); end

  sig { returns(T.untyped) }
  def before_remove_for_developers; end

  sig { returns(T.untyped) }
  def before_remove_for_developers?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_remove_for_developers=(val); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def autosave_associated_records_for_developers(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def validate_associated_records_for_developers(*args); end

  sig { returns(T.untyped) }
  def after_add_for_game_publishers; end

  sig { returns(T.untyped) }
  def after_add_for_game_publishers?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_add_for_game_publishers=(val); end

  sig { returns(T.untyped) }
  def after_remove_for_game_publishers; end

  sig { returns(T.untyped) }
  def after_remove_for_game_publishers?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_remove_for_game_publishers=(val); end

  sig { returns(T.untyped) }
  def before_add_for_game_publishers; end

  sig { returns(T.untyped) }
  def before_add_for_game_publishers?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_add_for_game_publishers=(val); end

  sig { returns(T.untyped) }
  def before_remove_for_game_publishers; end

  sig { returns(T.untyped) }
  def before_remove_for_game_publishers?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_remove_for_game_publishers=(val); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def autosave_associated_records_for_game_publishers(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def validate_associated_records_for_game_publishers(*args); end

  sig { returns(T.untyped) }
  def after_add_for_publishers; end

  sig { returns(T.untyped) }
  def after_add_for_publishers?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_add_for_publishers=(val); end

  sig { returns(T.untyped) }
  def after_remove_for_publishers; end

  sig { returns(T.untyped) }
  def after_remove_for_publishers?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_remove_for_publishers=(val); end

  sig { returns(T.untyped) }
  def before_add_for_publishers; end

  sig { returns(T.untyped) }
  def before_add_for_publishers?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_add_for_publishers=(val); end

  sig { returns(T.untyped) }
  def before_remove_for_publishers; end

  sig { returns(T.untyped) }
  def before_remove_for_publishers?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_remove_for_publishers=(val); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def autosave_associated_records_for_publishers(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def validate_associated_records_for_publishers(*args); end

  sig { returns(T.untyped) }
  def after_add_for_game_platforms; end

  sig { returns(T.untyped) }
  def after_add_for_game_platforms?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_add_for_game_platforms=(val); end

  sig { returns(T.untyped) }
  def after_remove_for_game_platforms; end

  sig { returns(T.untyped) }
  def after_remove_for_game_platforms?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_remove_for_game_platforms=(val); end

  sig { returns(T.untyped) }
  def before_add_for_game_platforms; end

  sig { returns(T.untyped) }
  def before_add_for_game_platforms?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_add_for_game_platforms=(val); end

  sig { returns(T.untyped) }
  def before_remove_for_game_platforms; end

  sig { returns(T.untyped) }
  def before_remove_for_game_platforms?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_remove_for_game_platforms=(val); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def autosave_associated_records_for_game_platforms(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def validate_associated_records_for_game_platforms(*args); end

  sig { returns(T.untyped) }
  def after_add_for_platforms; end

  sig { returns(T.untyped) }
  def after_add_for_platforms?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_add_for_platforms=(val); end

  sig { returns(T.untyped) }
  def after_remove_for_platforms; end

  sig { returns(T.untyped) }
  def after_remove_for_platforms?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_remove_for_platforms=(val); end

  sig { returns(T.untyped) }
  def before_add_for_platforms; end

  sig { returns(T.untyped) }
  def before_add_for_platforms?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_add_for_platforms=(val); end

  sig { returns(T.untyped) }
  def before_remove_for_platforms; end

  sig { returns(T.untyped) }
  def before_remove_for_platforms?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_remove_for_platforms=(val); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def autosave_associated_records_for_platforms(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def validate_associated_records_for_platforms(*args); end

  sig { returns(T.untyped) }
  def after_add_for_game_genres; end

  sig { returns(T.untyped) }
  def after_add_for_game_genres?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_add_for_game_genres=(val); end

  sig { returns(T.untyped) }
  def after_remove_for_game_genres; end

  sig { returns(T.untyped) }
  def after_remove_for_game_genres?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_remove_for_game_genres=(val); end

  sig { returns(T.untyped) }
  def before_add_for_game_genres; end

  sig { returns(T.untyped) }
  def before_add_for_game_genres?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_add_for_game_genres=(val); end

  sig { returns(T.untyped) }
  def before_remove_for_game_genres; end

  sig { returns(T.untyped) }
  def before_remove_for_game_genres?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_remove_for_game_genres=(val); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def autosave_associated_records_for_game_genres(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def validate_associated_records_for_game_genres(*args); end

  sig { returns(T.untyped) }
  def after_add_for_genres; end

  sig { returns(T.untyped) }
  def after_add_for_genres?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_add_for_genres=(val); end

  sig { returns(T.untyped) }
  def after_remove_for_genres; end

  sig { returns(T.untyped) }
  def after_remove_for_genres?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_remove_for_genres=(val); end

  sig { returns(T.untyped) }
  def before_add_for_genres; end

  sig { returns(T.untyped) }
  def before_add_for_genres?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_add_for_genres=(val); end

  sig { returns(T.untyped) }
  def before_remove_for_genres; end

  sig { returns(T.untyped) }
  def before_remove_for_genres?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_remove_for_genres=(val); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def autosave_associated_records_for_genres(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def validate_associated_records_for_genres(*args); end

  sig { returns(T.untyped) }
  def after_add_for_game_engines; end

  sig { returns(T.untyped) }
  def after_add_for_game_engines?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_add_for_game_engines=(val); end

  sig { returns(T.untyped) }
  def after_remove_for_game_engines; end

  sig { returns(T.untyped) }
  def after_remove_for_game_engines?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_remove_for_game_engines=(val); end

  sig { returns(T.untyped) }
  def before_add_for_game_engines; end

  sig { returns(T.untyped) }
  def before_add_for_game_engines?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_add_for_game_engines=(val); end

  sig { returns(T.untyped) }
  def before_remove_for_game_engines; end

  sig { returns(T.untyped) }
  def before_remove_for_game_engines?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_remove_for_game_engines=(val); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def autosave_associated_records_for_game_engines(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def validate_associated_records_for_game_engines(*args); end

  sig { returns(T.untyped) }
  def after_add_for_engines; end

  sig { returns(T.untyped) }
  def after_add_for_engines?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_add_for_engines=(val); end

  sig { returns(T.untyped) }
  def after_remove_for_engines; end

  sig { returns(T.untyped) }
  def after_remove_for_engines?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_remove_for_engines=(val); end

  sig { returns(T.untyped) }
  def before_add_for_engines; end

  sig { returns(T.untyped) }
  def before_add_for_engines?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_add_for_engines=(val); end

  sig { returns(T.untyped) }
  def before_remove_for_engines; end

  sig { returns(T.untyped) }
  def before_remove_for_engines?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_remove_for_engines=(val); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def autosave_associated_records_for_engines(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def validate_associated_records_for_engines(*args); end

  sig { returns(T.untyped) }
  def after_add_for_favorites; end

  sig { returns(T.untyped) }
  def after_add_for_favorites?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_add_for_favorites=(val); end

  sig { returns(T.untyped) }
  def after_remove_for_favorites; end

  sig { returns(T.untyped) }
  def after_remove_for_favorites?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_remove_for_favorites=(val); end

  sig { returns(T.untyped) }
  def before_add_for_favorites; end

  sig { returns(T.untyped) }
  def before_add_for_favorites?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_add_for_favorites=(val); end

  sig { returns(T.untyped) }
  def before_remove_for_favorites; end

  sig { returns(T.untyped) }
  def before_remove_for_favorites?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_remove_for_favorites=(val); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def autosave_associated_records_for_favorites(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def validate_associated_records_for_favorites(*args); end

  sig { returns(T.untyped) }
  def after_add_for_series; end

  sig { returns(T.untyped) }
  def after_add_for_series?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_add_for_series=(val); end

  sig { returns(T.untyped) }
  def after_remove_for_series; end

  sig { returns(T.untyped) }
  def after_remove_for_series?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_remove_for_series=(val); end

  sig { returns(T.untyped) }
  def before_add_for_series; end

  sig { returns(T.untyped) }
  def before_add_for_series?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_add_for_series=(val); end

  sig { returns(T.untyped) }
  def before_remove_for_series; end

  sig { returns(T.untyped) }
  def before_remove_for_series?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_remove_for_series=(val); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def autosave_associated_records_for_series(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def validate_associated_records_for_series(*args); end

  sig { returns(T.untyped) }
  def after_add_for_cover_attachment; end

  sig { returns(T.untyped) }
  def after_add_for_cover_attachment?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_add_for_cover_attachment=(val); end

  sig { returns(T.untyped) }
  def after_remove_for_cover_attachment; end

  sig { returns(T.untyped) }
  def after_remove_for_cover_attachment?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_remove_for_cover_attachment=(val); end

  sig { returns(T.untyped) }
  def before_add_for_cover_attachment; end

  sig { returns(T.untyped) }
  def before_add_for_cover_attachment?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_add_for_cover_attachment=(val); end

  sig { returns(T.untyped) }
  def before_remove_for_cover_attachment; end

  sig { returns(T.untyped) }
  def before_remove_for_cover_attachment?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_remove_for_cover_attachment=(val); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def autosave_associated_records_for_cover_attachment(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def validate_associated_records_for_cover_attachment(*args); end

  sig { returns(T.untyped) }
  def after_add_for_cover_blob; end

  sig { returns(T.untyped) }
  def after_add_for_cover_blob?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_add_for_cover_blob=(val); end

  sig { returns(T.untyped) }
  def after_remove_for_cover_blob; end

  sig { returns(T.untyped) }
  def after_remove_for_cover_blob?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_remove_for_cover_blob=(val); end

  sig { returns(T.untyped) }
  def before_add_for_cover_blob; end

  sig { returns(T.untyped) }
  def before_add_for_cover_blob?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_add_for_cover_blob=(val); end

  sig { returns(T.untyped) }
  def before_remove_for_cover_blob; end

  sig { returns(T.untyped) }
  def before_remove_for_cover_blob?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_remove_for_cover_blob=(val); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def autosave_associated_records_for_cover_blob(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def validate_associated_records_for_cover_blob(*args); end

  sig { returns(T.untyped) }
  def after_add_for_pg_search_document; end

  sig { returns(T.untyped) }
  def after_add_for_pg_search_document?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_add_for_pg_search_document=(val); end

  sig { returns(T.untyped) }
  def after_remove_for_pg_search_document; end

  sig { returns(T.untyped) }
  def after_remove_for_pg_search_document?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_remove_for_pg_search_document=(val); end

  sig { returns(T.untyped) }
  def before_add_for_pg_search_document; end

  sig { returns(T.untyped) }
  def before_add_for_pg_search_document?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_add_for_pg_search_document=(val); end

  sig { returns(T.untyped) }
  def before_remove_for_pg_search_document; end

  sig { returns(T.untyped) }
  def before_remove_for_pg_search_document?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_remove_for_pg_search_document=(val); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def autosave_associated_records_for_pg_search_document(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def validate_associated_records_for_pg_search_document(*args); end
end

module Game::GeneratedAssociationMethods
  extend T::Sig

  sig { returns(T.nilable(::ActiveStorage::Attachment)) }
  def cover_attachment; end

  sig { params(value: T.nilable(::ActiveStorage::Attachment)).void }
  def cover_attachment=(value); end

  sig { returns(T.nilable(::ActiveStorage::Blob)) }
  def cover_blob; end

  sig { params(value: T.nilable(::ActiveStorage::Blob)).void }
  def cover_blob=(value); end

  sig { returns(::Company::ActiveRecord_Associations_CollectionProxy) }
  def developers; end

  sig { params(value: T.any(T::Array[::Company], ::Company::ActiveRecord_Associations_CollectionProxy)).void }
  def developers=(value); end

  sig { returns(::Engine::ActiveRecord_Associations_CollectionProxy) }
  def engines; end

  sig { params(value: T.any(T::Array[::Engine], ::Engine::ActiveRecord_Associations_CollectionProxy)).void }
  def engines=(value); end

  sig { returns(::FavoriteGame::ActiveRecord_Associations_CollectionProxy) }
  def favorites; end

  sig { params(value: T.any(T::Array[::FavoriteGame], ::FavoriteGame::ActiveRecord_Associations_CollectionProxy)).void }
  def favorites=(value); end

  sig { returns(::GameDeveloper::ActiveRecord_Associations_CollectionProxy) }
  def game_developers; end

  sig { params(value: T.any(T::Array[::GameDeveloper], ::GameDeveloper::ActiveRecord_Associations_CollectionProxy)).void }
  def game_developers=(value); end

  sig { returns(::GameEngine::ActiveRecord_Associations_CollectionProxy) }
  def game_engines; end

  sig { params(value: T.any(T::Array[::GameEngine], ::GameEngine::ActiveRecord_Associations_CollectionProxy)).void }
  def game_engines=(value); end

  sig { returns(::GameGenre::ActiveRecord_Associations_CollectionProxy) }
  def game_genres; end

  sig { params(value: T.any(T::Array[::GameGenre], ::GameGenre::ActiveRecord_Associations_CollectionProxy)).void }
  def game_genres=(value); end

  sig { returns(::GamePlatform::ActiveRecord_Associations_CollectionProxy) }
  def game_platforms; end

  sig { params(value: T.any(T::Array[::GamePlatform], ::GamePlatform::ActiveRecord_Associations_CollectionProxy)).void }
  def game_platforms=(value); end

  sig { returns(::GamePublisher::ActiveRecord_Associations_CollectionProxy) }
  def game_publishers; end

  sig { params(value: T.any(T::Array[::GamePublisher], ::GamePublisher::ActiveRecord_Associations_CollectionProxy)).void }
  def game_publishers=(value); end

  sig { returns(::GamePurchase::ActiveRecord_Associations_CollectionProxy) }
  def game_purchases; end

  sig { params(value: T.any(T::Array[::GamePurchase], ::GamePurchase::ActiveRecord_Associations_CollectionProxy)).void }
  def game_purchases=(value); end

  sig { returns(::Genre::ActiveRecord_Associations_CollectionProxy) }
  def genres; end

  sig { params(value: T.any(T::Array[::Genre], ::Genre::ActiveRecord_Associations_CollectionProxy)).void }
  def genres=(value); end

  sig { returns(T.nilable(::PgSearch::Document)) }
  def pg_search_document; end

  sig { params(value: T.nilable(::PgSearch::Document)).void }
  def pg_search_document=(value); end

  sig { returns(::Platform::ActiveRecord_Associations_CollectionProxy) }
  def platforms; end

  sig { params(value: T.any(T::Array[::Platform], ::Platform::ActiveRecord_Associations_CollectionProxy)).void }
  def platforms=(value); end

  sig { returns(::Company::ActiveRecord_Associations_CollectionProxy) }
  def publishers; end

  sig { params(value: T.any(T::Array[::Company], ::Company::ActiveRecord_Associations_CollectionProxy)).void }
  def publishers=(value); end

  sig { returns(::User::ActiveRecord_Associations_CollectionProxy) }
  def purchasers; end

  sig { params(value: T.any(T::Array[::User], ::User::ActiveRecord_Associations_CollectionProxy)).void }
  def purchasers=(value); end

  sig { returns(T.nilable(::Series)) }
  def series; end

  sig { params(value: T.nilable(::Series)).void }
  def series=(value); end

  sig { returns(T.untyped) }
  def game_purchase_ids; end

  sig { params(ids: T.untyped).returns(T.untyped) }
  def game_purchase_ids=(ids); end

  sig { returns(T.untyped) }
  def purchaser_ids; end

  sig { params(ids: T.untyped).returns(T.untyped) }
  def purchaser_ids=(ids); end

  sig { returns(T.untyped) }
  def game_developer_ids; end

  sig { params(ids: T.untyped).returns(T.untyped) }
  def game_developer_ids=(ids); end

  sig { returns(T.untyped) }
  def developer_ids; end

  sig { params(ids: T.untyped).returns(T.untyped) }
  def developer_ids=(ids); end

  sig { returns(T.untyped) }
  def game_publisher_ids; end

  sig { params(ids: T.untyped).returns(T.untyped) }
  def game_publisher_ids=(ids); end

  sig { returns(T.untyped) }
  def publisher_ids; end

  sig { params(ids: T.untyped).returns(T.untyped) }
  def publisher_ids=(ids); end

  sig { returns(T.untyped) }
  def game_platform_ids; end

  sig { params(ids: T.untyped).returns(T.untyped) }
  def game_platform_ids=(ids); end

  sig { returns(T.untyped) }
  def platform_ids; end

  sig { params(ids: T.untyped).returns(T.untyped) }
  def platform_ids=(ids); end

  sig { returns(T.untyped) }
  def game_genre_ids; end

  sig { params(ids: T.untyped).returns(T.untyped) }
  def game_genre_ids=(ids); end

  sig { returns(T.untyped) }
  def genre_ids; end

  sig { params(ids: T.untyped).returns(T.untyped) }
  def genre_ids=(ids); end

  sig { returns(T.untyped) }
  def game_engine_ids; end

  sig { params(ids: T.untyped).returns(T.untyped) }
  def game_engine_ids=(ids); end

  sig { returns(T.untyped) }
  def engine_ids; end

  sig { params(ids: T.untyped).returns(T.untyped) }
  def engine_ids=(ids); end

  sig { returns(T.untyped) }
  def favorite_ids; end

  sig { params(ids: T.untyped).returns(T.untyped) }
  def favorite_ids=(ids); end

  sig { params(args: T.untyped, block: T.untyped).returns(T.untyped) }
  def build_series(*args, &block); end

  sig { params(args: T.untyped, block: T.untyped).returns(T.untyped) }
  def create_series(*args, &block); end

  sig { params(args: T.untyped, block: T.untyped).returns(T.untyped) }
  def create_series!(*args, &block); end

  sig { returns(T.untyped) }
  def reload_series; end

  sig { returns(T.untyped) }
  def series_ids; end

  sig { params(ids: T.untyped).returns(T.untyped) }
  def series_ids=(ids); end

  sig { params(args: T.untyped, block: T.untyped).returns(T.untyped) }
  def build_cover_attachment(*args, &block); end

  sig { params(args: T.untyped, block: T.untyped).returns(T.untyped) }
  def create_cover_attachment(*args, &block); end

  sig { params(args: T.untyped, block: T.untyped).returns(T.untyped) }
  def create_cover_attachment!(*args, &block); end

  sig { returns(T.untyped) }
  def reload_cover_attachment; end

  sig { returns(T.untyped) }
  def cover_attachment_ids; end

  sig { params(ids: T.untyped).returns(T.untyped) }
  def cover_attachment_ids=(ids); end

  sig { returns(T.untyped) }
  def cover_blob_ids; end

  sig { params(ids: T.untyped).returns(T.untyped) }
  def cover_blob_ids=(ids); end

  sig { params(args: T.untyped, block: T.untyped).returns(T.untyped) }
  def build_pg_search_document(*args, &block); end

  sig { params(args: T.untyped, block: T.untyped).returns(T.untyped) }
  def create_pg_search_document(*args, &block); end

  sig { params(args: T.untyped, block: T.untyped).returns(T.untyped) }
  def create_pg_search_document!(*args, &block); end

  sig { returns(T.untyped) }
  def reload_pg_search_document; end

  sig { returns(T.untyped) }
  def pg_search_document_ids; end

  sig { params(ids: T.untyped).returns(T.untyped) }
  def pg_search_document_ids=(ids); end
end
