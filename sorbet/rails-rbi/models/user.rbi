# This is an autogenerated file for dynamic methods in User
# Please rerun rake rails_rbi:models[User] to regenerate.

# typed: strong
module User::EnumInstanceMethods
  extend T::Sig

  sig { returns(T::Boolean) }
  def public_account?; end

  sig { void }
  def public_account!; end

  sig { returns(T::Boolean) }
  def private_account?; end

  sig { void }
  def private_account!; end

  sig { returns(T::Boolean) }
  def member?; end

  sig { void }
  def member!; end

  sig { returns(T::Boolean) }
  def moderator?; end

  sig { void }
  def moderator!; end

  sig { returns(T::Boolean) }
  def admin?; end

  sig { void }
  def admin!; end
end

module User::ActiveRelation_WhereNot
  sig { params(opts: T.untyped, rest: T.untyped).returns(T.self_type) }
  def not(opts, *rest); end
end

module User::CustomFinderMethods
  sig { params(limit: Integer).returns(T::Array[User]) }
  def first_n(limit); end

  sig { params(limit: Integer).returns(T::Array[User]) }
  def last_n(limit); end

  sig { params(args: T::Array[T.any(Integer, String)]).returns(T::Array[User]) }
  def find_n(*args); end

  sig { params(id: Integer).returns(T.nilable(User)) }
  def find_by_id(id); end

  sig { params(id: Integer).returns(User) }
  def find_by_id!(id); end
end

class User < ApplicationRecord
  include User::EnumInstanceMethods
  include User::GeneratedAttributeMethods
  include User::GeneratedAssociationMethods
  extend User::CustomFinderMethods
  extend T::Sig
  extend T::Generic

  sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
  def self.privacies; end

  sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
  def self.roles; end

  sig { params(args: T.untyped).returns(User::ActiveRecord_Relation) }
  def self.admin(*args); end

  sig { params(args: T.untyped).returns(User::ActiveRecord_Relation) }
  def self.member(*args); end

  sig { params(args: T.untyped).returns(User::ActiveRecord_Relation) }
  def self.moderator(*args); end

  sig { params(args: T.untyped).returns(User::ActiveRecord_Relation) }
  def self.not_admin(*args); end

  sig { params(args: T.untyped).returns(User::ActiveRecord_Relation) }
  def self.not_member(*args); end

  sig { params(args: T.untyped).returns(User::ActiveRecord_Relation) }
  def self.not_moderator(*args); end

  sig { params(args: T.untyped).returns(User::ActiveRecord_Relation) }
  def self.not_private_account(*args); end

  sig { params(args: T.untyped).returns(User::ActiveRecord_Relation) }
  def self.not_public_account(*args); end

  sig { params(args: T.untyped).returns(User::ActiveRecord_Relation) }
  def self.private_account(*args); end

  sig { params(args: T.untyped).returns(User::ActiveRecord_Relation) }
  def self.public_account(*args); end

  sig { params(args: T.untyped).returns(User::ActiveRecord_Relation) }
  def self.with_attached_avatar(*args); end

  sig { returns(User::ActiveRecord_Relation) }
  def self.all; end

  sig { params(block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def self.unscoped(&block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def self.select(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def self.reselect(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def self.order(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def self.reorder(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def self.group(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def self.limit(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def self.offset(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def self.joins(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def self.left_joins(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def self.left_outer_joins(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def self.where(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def self.rewhere(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def self.preload(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def self.extract_associated(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def self.eager_load(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def self.includes(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def self.from(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def self.lock(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def self.readonly(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def self.extending(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def self.or(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def self.having(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def self.create_with(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def self.distinct(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def self.references(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def self.none(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def self.unscope(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def self.optimizer_hints(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def self.merge(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def self.except(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def self.only(*args, &block); end

  sig { params(args: T.untyped).returns(User) }
  def self.find(*args); end

  sig { params(args: T.untyped).returns(T.nilable(User)) }
  def self.find_by(*args); end

  sig { params(args: T.untyped).returns(User) }
  def self.find_by!(*args); end

  sig { returns(T.nilable(User)) }
  def self.first; end

  sig { returns(User) }
  def self.first!; end

  sig { returns(T.nilable(User)) }
  def self.second; end

  sig { returns(User) }
  def self.second!; end

  sig { returns(T.nilable(User)) }
  def self.third; end

  sig { returns(User) }
  def self.third!; end

  sig { returns(T.nilable(User)) }
  def self.third_to_last; end

  sig { returns(User) }
  def self.third_to_last!; end

  sig { returns(T.nilable(User)) }
  def self.second_to_last; end

  sig { returns(User) }
  def self.second_to_last!; end

  sig { returns(T.nilable(User)) }
  def self.last; end

  sig { returns(User) }
  def self.last!; end

  sig { params(conditions: T.untyped).returns(T::Boolean) }
  def self.exists?(conditions = nil); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def self.any?(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def self.many?(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def self.none?(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def self.one?(*args); end

  sig { returns(T.untyped) }
  def self.after_add_for_game_purchases; end

  sig { returns(T.untyped) }
  def self.after_add_for_game_purchases?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.after_add_for_game_purchases=(val); end

  sig { returns(T.untyped) }
  def after_add_for_game_purchases; end

  sig { returns(T.untyped) }
  def after_add_for_game_purchases?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_add_for_game_purchases=(val); end

  sig { returns(T.untyped) }
  def self.after_remove_for_game_purchases; end

  sig { returns(T.untyped) }
  def self.after_remove_for_game_purchases?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.after_remove_for_game_purchases=(val); end

  sig { returns(T.untyped) }
  def after_remove_for_game_purchases; end

  sig { returns(T.untyped) }
  def after_remove_for_game_purchases?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_remove_for_game_purchases=(val); end

  sig { returns(T.untyped) }
  def self.before_add_for_game_purchases; end

  sig { returns(T.untyped) }
  def self.before_add_for_game_purchases?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.before_add_for_game_purchases=(val); end

  sig { returns(T.untyped) }
  def before_add_for_game_purchases; end

  sig { returns(T.untyped) }
  def before_add_for_game_purchases?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_add_for_game_purchases=(val); end

  sig { returns(T.untyped) }
  def self.before_remove_for_game_purchases; end

  sig { returns(T.untyped) }
  def self.before_remove_for_game_purchases?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.before_remove_for_game_purchases=(val); end

  sig { returns(T.untyped) }
  def before_remove_for_game_purchases; end

  sig { returns(T.untyped) }
  def before_remove_for_game_purchases?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_remove_for_game_purchases=(val); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def autosave_associated_records_for_game_purchases(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def validate_associated_records_for_game_purchases(*args); end

  sig { returns(T.untyped) }
  def self.after_add_for_games; end

  sig { returns(T.untyped) }
  def self.after_add_for_games?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.after_add_for_games=(val); end

  sig { returns(T.untyped) }
  def after_add_for_games; end

  sig { returns(T.untyped) }
  def after_add_for_games?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_add_for_games=(val); end

  sig { returns(T.untyped) }
  def self.after_remove_for_games; end

  sig { returns(T.untyped) }
  def self.after_remove_for_games?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.after_remove_for_games=(val); end

  sig { returns(T.untyped) }
  def after_remove_for_games; end

  sig { returns(T.untyped) }
  def after_remove_for_games?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_remove_for_games=(val); end

  sig { returns(T.untyped) }
  def self.before_add_for_games; end

  sig { returns(T.untyped) }
  def self.before_add_for_games?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.before_add_for_games=(val); end

  sig { returns(T.untyped) }
  def before_add_for_games; end

  sig { returns(T.untyped) }
  def before_add_for_games?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_add_for_games=(val); end

  sig { returns(T.untyped) }
  def self.before_remove_for_games; end

  sig { returns(T.untyped) }
  def self.before_remove_for_games?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.before_remove_for_games=(val); end

  sig { returns(T.untyped) }
  def before_remove_for_games; end

  sig { returns(T.untyped) }
  def before_remove_for_games?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_remove_for_games=(val); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def autosave_associated_records_for_games(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def validate_associated_records_for_games(*args); end

  sig { returns(T.untyped) }
  def self.after_add_for_favorite_games; end

  sig { returns(T.untyped) }
  def self.after_add_for_favorite_games?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.after_add_for_favorite_games=(val); end

  sig { returns(T.untyped) }
  def after_add_for_favorite_games; end

  sig { returns(T.untyped) }
  def after_add_for_favorite_games?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_add_for_favorite_games=(val); end

  sig { returns(T.untyped) }
  def self.after_remove_for_favorite_games; end

  sig { returns(T.untyped) }
  def self.after_remove_for_favorite_games?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.after_remove_for_favorite_games=(val); end

  sig { returns(T.untyped) }
  def after_remove_for_favorite_games; end

  sig { returns(T.untyped) }
  def after_remove_for_favorite_games?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_remove_for_favorite_games=(val); end

  sig { returns(T.untyped) }
  def self.before_add_for_favorite_games; end

  sig { returns(T.untyped) }
  def self.before_add_for_favorite_games?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.before_add_for_favorite_games=(val); end

  sig { returns(T.untyped) }
  def before_add_for_favorite_games; end

  sig { returns(T.untyped) }
  def before_add_for_favorite_games?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_add_for_favorite_games=(val); end

  sig { returns(T.untyped) }
  def self.before_remove_for_favorite_games; end

  sig { returns(T.untyped) }
  def self.before_remove_for_favorite_games?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.before_remove_for_favorite_games=(val); end

  sig { returns(T.untyped) }
  def before_remove_for_favorite_games; end

  sig { returns(T.untyped) }
  def before_remove_for_favorite_games?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_remove_for_favorite_games=(val); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def autosave_associated_records_for_favorite_games(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def validate_associated_records_for_favorite_games(*args); end

  sig { returns(T.untyped) }
  def self.after_add_for_active_relationships; end

  sig { returns(T.untyped) }
  def self.after_add_for_active_relationships?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.after_add_for_active_relationships=(val); end

  sig { returns(T.untyped) }
  def after_add_for_active_relationships; end

  sig { returns(T.untyped) }
  def after_add_for_active_relationships?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_add_for_active_relationships=(val); end

  sig { returns(T.untyped) }
  def self.after_remove_for_active_relationships; end

  sig { returns(T.untyped) }
  def self.after_remove_for_active_relationships?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.after_remove_for_active_relationships=(val); end

  sig { returns(T.untyped) }
  def after_remove_for_active_relationships; end

  sig { returns(T.untyped) }
  def after_remove_for_active_relationships?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_remove_for_active_relationships=(val); end

  sig { returns(T.untyped) }
  def self.before_add_for_active_relationships; end

  sig { returns(T.untyped) }
  def self.before_add_for_active_relationships?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.before_add_for_active_relationships=(val); end

  sig { returns(T.untyped) }
  def before_add_for_active_relationships; end

  sig { returns(T.untyped) }
  def before_add_for_active_relationships?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_add_for_active_relationships=(val); end

  sig { returns(T.untyped) }
  def self.before_remove_for_active_relationships; end

  sig { returns(T.untyped) }
  def self.before_remove_for_active_relationships?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.before_remove_for_active_relationships=(val); end

  sig { returns(T.untyped) }
  def before_remove_for_active_relationships; end

  sig { returns(T.untyped) }
  def before_remove_for_active_relationships?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_remove_for_active_relationships=(val); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def autosave_associated_records_for_active_relationships(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def validate_associated_records_for_active_relationships(*args); end

  sig { returns(T.untyped) }
  def self.after_add_for_following; end

  sig { returns(T.untyped) }
  def self.after_add_for_following?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.after_add_for_following=(val); end

  sig { returns(T.untyped) }
  def after_add_for_following; end

  sig { returns(T.untyped) }
  def after_add_for_following?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_add_for_following=(val); end

  sig { returns(T.untyped) }
  def self.after_remove_for_following; end

  sig { returns(T.untyped) }
  def self.after_remove_for_following?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.after_remove_for_following=(val); end

  sig { returns(T.untyped) }
  def after_remove_for_following; end

  sig { returns(T.untyped) }
  def after_remove_for_following?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_remove_for_following=(val); end

  sig { returns(T.untyped) }
  def self.before_add_for_following; end

  sig { returns(T.untyped) }
  def self.before_add_for_following?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.before_add_for_following=(val); end

  sig { returns(T.untyped) }
  def before_add_for_following; end

  sig { returns(T.untyped) }
  def before_add_for_following?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_add_for_following=(val); end

  sig { returns(T.untyped) }
  def self.before_remove_for_following; end

  sig { returns(T.untyped) }
  def self.before_remove_for_following?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.before_remove_for_following=(val); end

  sig { returns(T.untyped) }
  def before_remove_for_following; end

  sig { returns(T.untyped) }
  def before_remove_for_following?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_remove_for_following=(val); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def autosave_associated_records_for_following(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def validate_associated_records_for_following(*args); end

  sig { returns(T.untyped) }
  def self.after_add_for_passive_relationships; end

  sig { returns(T.untyped) }
  def self.after_add_for_passive_relationships?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.after_add_for_passive_relationships=(val); end

  sig { returns(T.untyped) }
  def after_add_for_passive_relationships; end

  sig { returns(T.untyped) }
  def after_add_for_passive_relationships?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_add_for_passive_relationships=(val); end

  sig { returns(T.untyped) }
  def self.after_remove_for_passive_relationships; end

  sig { returns(T.untyped) }
  def self.after_remove_for_passive_relationships?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.after_remove_for_passive_relationships=(val); end

  sig { returns(T.untyped) }
  def after_remove_for_passive_relationships; end

  sig { returns(T.untyped) }
  def after_remove_for_passive_relationships?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_remove_for_passive_relationships=(val); end

  sig { returns(T.untyped) }
  def self.before_add_for_passive_relationships; end

  sig { returns(T.untyped) }
  def self.before_add_for_passive_relationships?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.before_add_for_passive_relationships=(val); end

  sig { returns(T.untyped) }
  def before_add_for_passive_relationships; end

  sig { returns(T.untyped) }
  def before_add_for_passive_relationships?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_add_for_passive_relationships=(val); end

  sig { returns(T.untyped) }
  def self.before_remove_for_passive_relationships; end

  sig { returns(T.untyped) }
  def self.before_remove_for_passive_relationships?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.before_remove_for_passive_relationships=(val); end

  sig { returns(T.untyped) }
  def before_remove_for_passive_relationships; end

  sig { returns(T.untyped) }
  def before_remove_for_passive_relationships?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_remove_for_passive_relationships=(val); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def autosave_associated_records_for_passive_relationships(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def validate_associated_records_for_passive_relationships(*args); end

  sig { returns(T.untyped) }
  def self.after_add_for_followers; end

  sig { returns(T.untyped) }
  def self.after_add_for_followers?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.after_add_for_followers=(val); end

  sig { returns(T.untyped) }
  def after_add_for_followers; end

  sig { returns(T.untyped) }
  def after_add_for_followers?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_add_for_followers=(val); end

  sig { returns(T.untyped) }
  def self.after_remove_for_followers; end

  sig { returns(T.untyped) }
  def self.after_remove_for_followers?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.after_remove_for_followers=(val); end

  sig { returns(T.untyped) }
  def after_remove_for_followers; end

  sig { returns(T.untyped) }
  def after_remove_for_followers?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_remove_for_followers=(val); end

  sig { returns(T.untyped) }
  def self.before_add_for_followers; end

  sig { returns(T.untyped) }
  def self.before_add_for_followers?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.before_add_for_followers=(val); end

  sig { returns(T.untyped) }
  def before_add_for_followers; end

  sig { returns(T.untyped) }
  def before_add_for_followers?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_add_for_followers=(val); end

  sig { returns(T.untyped) }
  def self.before_remove_for_followers; end

  sig { returns(T.untyped) }
  def self.before_remove_for_followers?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.before_remove_for_followers=(val); end

  sig { returns(T.untyped) }
  def before_remove_for_followers; end

  sig { returns(T.untyped) }
  def before_remove_for_followers?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_remove_for_followers=(val); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def autosave_associated_records_for_followers(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def validate_associated_records_for_followers(*args); end

  sig { returns(T.untyped) }
  def self.after_add_for_events; end

  sig { returns(T.untyped) }
  def self.after_add_for_events?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.after_add_for_events=(val); end

  sig { returns(T.untyped) }
  def after_add_for_events; end

  sig { returns(T.untyped) }
  def after_add_for_events?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_add_for_events=(val); end

  sig { returns(T.untyped) }
  def self.after_remove_for_events; end

  sig { returns(T.untyped) }
  def self.after_remove_for_events?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.after_remove_for_events=(val); end

  sig { returns(T.untyped) }
  def after_remove_for_events; end

  sig { returns(T.untyped) }
  def after_remove_for_events?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_remove_for_events=(val); end

  sig { returns(T.untyped) }
  def self.before_add_for_events; end

  sig { returns(T.untyped) }
  def self.before_add_for_events?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.before_add_for_events=(val); end

  sig { returns(T.untyped) }
  def before_add_for_events; end

  sig { returns(T.untyped) }
  def before_add_for_events?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_add_for_events=(val); end

  sig { returns(T.untyped) }
  def self.before_remove_for_events; end

  sig { returns(T.untyped) }
  def self.before_remove_for_events?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.before_remove_for_events=(val); end

  sig { returns(T.untyped) }
  def before_remove_for_events; end

  sig { returns(T.untyped) }
  def before_remove_for_events?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_remove_for_events=(val); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def autosave_associated_records_for_events(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def validate_associated_records_for_events(*args); end

  sig { returns(T.untyped) }
  def self.after_add_for_wikidata_blocklists; end

  sig { returns(T.untyped) }
  def self.after_add_for_wikidata_blocklists?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.after_add_for_wikidata_blocklists=(val); end

  sig { returns(T.untyped) }
  def after_add_for_wikidata_blocklists; end

  sig { returns(T.untyped) }
  def after_add_for_wikidata_blocklists?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_add_for_wikidata_blocklists=(val); end

  sig { returns(T.untyped) }
  def self.after_remove_for_wikidata_blocklists; end

  sig { returns(T.untyped) }
  def self.after_remove_for_wikidata_blocklists?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.after_remove_for_wikidata_blocklists=(val); end

  sig { returns(T.untyped) }
  def after_remove_for_wikidata_blocklists; end

  sig { returns(T.untyped) }
  def after_remove_for_wikidata_blocklists?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_remove_for_wikidata_blocklists=(val); end

  sig { returns(T.untyped) }
  def self.before_add_for_wikidata_blocklists; end

  sig { returns(T.untyped) }
  def self.before_add_for_wikidata_blocklists?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.before_add_for_wikidata_blocklists=(val); end

  sig { returns(T.untyped) }
  def before_add_for_wikidata_blocklists; end

  sig { returns(T.untyped) }
  def before_add_for_wikidata_blocklists?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_add_for_wikidata_blocklists=(val); end

  sig { returns(T.untyped) }
  def self.before_remove_for_wikidata_blocklists; end

  sig { returns(T.untyped) }
  def self.before_remove_for_wikidata_blocklists?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.before_remove_for_wikidata_blocklists=(val); end

  sig { returns(T.untyped) }
  def before_remove_for_wikidata_blocklists; end

  sig { returns(T.untyped) }
  def before_remove_for_wikidata_blocklists?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_remove_for_wikidata_blocklists=(val); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def autosave_associated_records_for_wikidata_blocklists(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def validate_associated_records_for_wikidata_blocklists(*args); end

  sig { returns(T.untyped) }
  def self.after_add_for_external_account; end

  sig { returns(T.untyped) }
  def self.after_add_for_external_account?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.after_add_for_external_account=(val); end

  sig { returns(T.untyped) }
  def after_add_for_external_account; end

  sig { returns(T.untyped) }
  def after_add_for_external_account?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_add_for_external_account=(val); end

  sig { returns(T.untyped) }
  def self.after_remove_for_external_account; end

  sig { returns(T.untyped) }
  def self.after_remove_for_external_account?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.after_remove_for_external_account=(val); end

  sig { returns(T.untyped) }
  def after_remove_for_external_account; end

  sig { returns(T.untyped) }
  def after_remove_for_external_account?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_remove_for_external_account=(val); end

  sig { returns(T.untyped) }
  def self.before_add_for_external_account; end

  sig { returns(T.untyped) }
  def self.before_add_for_external_account?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.before_add_for_external_account=(val); end

  sig { returns(T.untyped) }
  def before_add_for_external_account; end

  sig { returns(T.untyped) }
  def before_add_for_external_account?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_add_for_external_account=(val); end

  sig { returns(T.untyped) }
  def self.before_remove_for_external_account; end

  sig { returns(T.untyped) }
  def self.before_remove_for_external_account?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.before_remove_for_external_account=(val); end

  sig { returns(T.untyped) }
  def before_remove_for_external_account; end

  sig { returns(T.untyped) }
  def before_remove_for_external_account?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_remove_for_external_account=(val); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def autosave_associated_records_for_external_account(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def validate_associated_records_for_external_account(*args); end

  sig { returns(T.untyped) }
  def self.after_add_for_avatar_attachment; end

  sig { returns(T.untyped) }
  def self.after_add_for_avatar_attachment?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.after_add_for_avatar_attachment=(val); end

  sig { returns(T.untyped) }
  def after_add_for_avatar_attachment; end

  sig { returns(T.untyped) }
  def after_add_for_avatar_attachment?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_add_for_avatar_attachment=(val); end

  sig { returns(T.untyped) }
  def self.after_remove_for_avatar_attachment; end

  sig { returns(T.untyped) }
  def self.after_remove_for_avatar_attachment?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.after_remove_for_avatar_attachment=(val); end

  sig { returns(T.untyped) }
  def after_remove_for_avatar_attachment; end

  sig { returns(T.untyped) }
  def after_remove_for_avatar_attachment?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_remove_for_avatar_attachment=(val); end

  sig { returns(T.untyped) }
  def self.before_add_for_avatar_attachment; end

  sig { returns(T.untyped) }
  def self.before_add_for_avatar_attachment?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.before_add_for_avatar_attachment=(val); end

  sig { returns(T.untyped) }
  def before_add_for_avatar_attachment; end

  sig { returns(T.untyped) }
  def before_add_for_avatar_attachment?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_add_for_avatar_attachment=(val); end

  sig { returns(T.untyped) }
  def self.before_remove_for_avatar_attachment; end

  sig { returns(T.untyped) }
  def self.before_remove_for_avatar_attachment?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.before_remove_for_avatar_attachment=(val); end

  sig { returns(T.untyped) }
  def before_remove_for_avatar_attachment; end

  sig { returns(T.untyped) }
  def before_remove_for_avatar_attachment?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_remove_for_avatar_attachment=(val); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def autosave_associated_records_for_avatar_attachment(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def validate_associated_records_for_avatar_attachment(*args); end

  sig { returns(T.untyped) }
  def self.after_add_for_avatar_blob; end

  sig { returns(T.untyped) }
  def self.after_add_for_avatar_blob?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.after_add_for_avatar_blob=(val); end

  sig { returns(T.untyped) }
  def after_add_for_avatar_blob; end

  sig { returns(T.untyped) }
  def after_add_for_avatar_blob?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_add_for_avatar_blob=(val); end

  sig { returns(T.untyped) }
  def self.after_remove_for_avatar_blob; end

  sig { returns(T.untyped) }
  def self.after_remove_for_avatar_blob?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.after_remove_for_avatar_blob=(val); end

  sig { returns(T.untyped) }
  def after_remove_for_avatar_blob; end

  sig { returns(T.untyped) }
  def after_remove_for_avatar_blob?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_remove_for_avatar_blob=(val); end

  sig { returns(T.untyped) }
  def self.before_add_for_avatar_blob; end

  sig { returns(T.untyped) }
  def self.before_add_for_avatar_blob?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.before_add_for_avatar_blob=(val); end

  sig { returns(T.untyped) }
  def before_add_for_avatar_blob; end

  sig { returns(T.untyped) }
  def before_add_for_avatar_blob?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_add_for_avatar_blob=(val); end

  sig { returns(T.untyped) }
  def self.before_remove_for_avatar_blob; end

  sig { returns(T.untyped) }
  def self.before_remove_for_avatar_blob?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.before_remove_for_avatar_blob=(val); end

  sig { returns(T.untyped) }
  def before_remove_for_avatar_blob; end

  sig { returns(T.untyped) }
  def before_remove_for_avatar_blob?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_remove_for_avatar_blob=(val); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def autosave_associated_records_for_avatar_blob(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def validate_associated_records_for_avatar_blob(*args); end

  sig { params(num: T.nilable(Integer)).returns(User::ActiveRecord_Relation) }
  def self.page(num = nil); end

  sig { returns(User::ActiveRecord_Relation) }
  def self.friendly; end
end

class User::ActiveRecord_Relation < ActiveRecord::Relation
  include User::ActiveRelation_WhereNot
  include User::CustomFinderMethods
  include Enumerable
  extend T::Sig
  extend T::Generic
  Elem = type_member(fixed: User)

  sig { params(args: T.untyped).returns(User::ActiveRecord_Relation) }
  def admin(*args); end

  sig { params(args: T.untyped).returns(User::ActiveRecord_Relation) }
  def member(*args); end

  sig { params(args: T.untyped).returns(User::ActiveRecord_Relation) }
  def moderator(*args); end

  sig { params(args: T.untyped).returns(User::ActiveRecord_Relation) }
  def not_admin(*args); end

  sig { params(args: T.untyped).returns(User::ActiveRecord_Relation) }
  def not_member(*args); end

  sig { params(args: T.untyped).returns(User::ActiveRecord_Relation) }
  def not_moderator(*args); end

  sig { params(args: T.untyped).returns(User::ActiveRecord_Relation) }
  def not_private_account(*args); end

  sig { params(args: T.untyped).returns(User::ActiveRecord_Relation) }
  def not_public_account(*args); end

  sig { params(args: T.untyped).returns(User::ActiveRecord_Relation) }
  def private_account(*args); end

  sig { params(args: T.untyped).returns(User::ActiveRecord_Relation) }
  def public_account(*args); end

  sig { params(args: T.untyped).returns(User::ActiveRecord_Relation) }
  def with_attached_avatar(*args); end

  sig { returns(User::ActiveRecord_Relation) }
  def all; end

  sig { params(block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def unscoped(&block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def select(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def reselect(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def order(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def reorder(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def group(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def limit(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def offset(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def joins(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def left_joins(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def left_outer_joins(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def where(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def rewhere(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def preload(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def extract_associated(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def eager_load(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def includes(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def from(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def lock(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def readonly(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def extending(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def or(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def having(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def create_with(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def distinct(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def references(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def none(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def unscope(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def optimizer_hints(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def merge(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def except(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def only(*args, &block); end

  sig { params(args: T.untyped).returns(User) }
  def find(*args); end

  sig { params(args: T.untyped).returns(T.nilable(User)) }
  def find_by(*args); end

  sig { params(args: T.untyped).returns(User) }
  def find_by!(*args); end

  sig { returns(T.nilable(User)) }
  def first; end

  sig { returns(User) }
  def first!; end

  sig { returns(T.nilable(User)) }
  def second; end

  sig { returns(User) }
  def second!; end

  sig { returns(T.nilable(User)) }
  def third; end

  sig { returns(User) }
  def third!; end

  sig { returns(T.nilable(User)) }
  def third_to_last; end

  sig { returns(User) }
  def third_to_last!; end

  sig { returns(T.nilable(User)) }
  def second_to_last; end

  sig { returns(User) }
  def second_to_last!; end

  sig { returns(T.nilable(User)) }
  def last; end

  sig { returns(User) }
  def last!; end

  sig { params(conditions: T.untyped).returns(T::Boolean) }
  def exists?(conditions = nil); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def any?(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def many?(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def none?(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def one?(*args); end

  sig { override.params(block: T.proc.params(e: User).void).void }
  def each(&block); end

  sig { params(level: T.nilable(Integer)).returns(T::Array[User]) }
  def flatten(level); end

  sig { returns(T::Array[User]) }
  def to_a; end

  sig do
    type_parameters(:U).params(
        blk: T.proc.params(arg0: Elem).returns(T.type_parameter(:U)),
    )
    .returns(T::Array[T.type_parameter(:U)])
  end
  def map(&blk); end

  sig { params(num: T.nilable(Integer)).returns(User::ActiveRecord_Relation) }
  def page(num = nil); end

  sig { returns(User::ActiveRecord_Relation) }
  def friendly; end
end

class User::ActiveRecord_AssociationRelation < ActiveRecord::AssociationRelation
  include User::ActiveRelation_WhereNot
  include User::CustomFinderMethods
  include Enumerable
  extend T::Sig
  extend T::Generic
  Elem = type_member(fixed: User)

  sig { params(args: T.untyped).returns(User::ActiveRecord_AssociationRelation) }
  def admin(*args); end

  sig { params(args: T.untyped).returns(User::ActiveRecord_AssociationRelation) }
  def member(*args); end

  sig { params(args: T.untyped).returns(User::ActiveRecord_AssociationRelation) }
  def moderator(*args); end

  sig { params(args: T.untyped).returns(User::ActiveRecord_AssociationRelation) }
  def not_admin(*args); end

  sig { params(args: T.untyped).returns(User::ActiveRecord_AssociationRelation) }
  def not_member(*args); end

  sig { params(args: T.untyped).returns(User::ActiveRecord_AssociationRelation) }
  def not_moderator(*args); end

  sig { params(args: T.untyped).returns(User::ActiveRecord_AssociationRelation) }
  def not_private_account(*args); end

  sig { params(args: T.untyped).returns(User::ActiveRecord_AssociationRelation) }
  def not_public_account(*args); end

  sig { params(args: T.untyped).returns(User::ActiveRecord_AssociationRelation) }
  def private_account(*args); end

  sig { params(args: T.untyped).returns(User::ActiveRecord_AssociationRelation) }
  def public_account(*args); end

  sig { params(args: T.untyped).returns(User::ActiveRecord_AssociationRelation) }
  def with_attached_avatar(*args); end

  sig { returns(User::ActiveRecord_AssociationRelation) }
  def all; end

  sig { params(block: T.nilable(T.proc.void)).returns(User::ActiveRecord_AssociationRelation) }
  def unscoped(&block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_AssociationRelation) }
  def select(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_AssociationRelation) }
  def reselect(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_AssociationRelation) }
  def order(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_AssociationRelation) }
  def reorder(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_AssociationRelation) }
  def group(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_AssociationRelation) }
  def limit(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_AssociationRelation) }
  def offset(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_AssociationRelation) }
  def joins(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_AssociationRelation) }
  def left_joins(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_AssociationRelation) }
  def left_outer_joins(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_AssociationRelation) }
  def where(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_AssociationRelation) }
  def rewhere(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_AssociationRelation) }
  def preload(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_AssociationRelation) }
  def extract_associated(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_AssociationRelation) }
  def eager_load(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_AssociationRelation) }
  def includes(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_AssociationRelation) }
  def from(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_AssociationRelation) }
  def lock(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_AssociationRelation) }
  def readonly(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_AssociationRelation) }
  def extending(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_AssociationRelation) }
  def or(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_AssociationRelation) }
  def having(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_AssociationRelation) }
  def create_with(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_AssociationRelation) }
  def distinct(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_AssociationRelation) }
  def references(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_AssociationRelation) }
  def none(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_AssociationRelation) }
  def unscope(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_AssociationRelation) }
  def optimizer_hints(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_AssociationRelation) }
  def merge(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_AssociationRelation) }
  def except(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_AssociationRelation) }
  def only(*args, &block); end

  sig { params(args: T.untyped).returns(User) }
  def find(*args); end

  sig { params(args: T.untyped).returns(T.nilable(User)) }
  def find_by(*args); end

  sig { params(args: T.untyped).returns(User) }
  def find_by!(*args); end

  sig { returns(T.nilable(User)) }
  def first; end

  sig { returns(User) }
  def first!; end

  sig { returns(T.nilable(User)) }
  def second; end

  sig { returns(User) }
  def second!; end

  sig { returns(T.nilable(User)) }
  def third; end

  sig { returns(User) }
  def third!; end

  sig { returns(T.nilable(User)) }
  def third_to_last; end

  sig { returns(User) }
  def third_to_last!; end

  sig { returns(T.nilable(User)) }
  def second_to_last; end

  sig { returns(User) }
  def second_to_last!; end

  sig { returns(T.nilable(User)) }
  def last; end

  sig { returns(User) }
  def last!; end

  sig { params(conditions: T.untyped).returns(T::Boolean) }
  def exists?(conditions = nil); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def any?(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def many?(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def none?(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def one?(*args); end

  sig { override.params(block: T.proc.params(e: User).void).void }
  def each(&block); end

  sig { params(level: T.nilable(Integer)).returns(T::Array[User]) }
  def flatten(level); end

  sig { returns(T::Array[User]) }
  def to_a; end

  sig do
    type_parameters(:U).params(
        blk: T.proc.params(arg0: Elem).returns(T.type_parameter(:U)),
    )
    .returns(T::Array[T.type_parameter(:U)])
  end
  def map(&blk); end

  sig { params(num: T.nilable(Integer)).returns(User::ActiveRecord_AssociationRelation) }
  def page(num = nil); end

  sig { returns(User::ActiveRecord_AssociationRelation) }
  def friendly; end
end

class User::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  include User::CustomFinderMethods
  include Enumerable
  extend T::Sig
  extend T::Generic
  Elem = type_member(fixed: User)

  sig { params(args: T.untyped).returns(User::ActiveRecord_AssociationRelation) }
  def admin(*args); end

  sig { params(args: T.untyped).returns(User::ActiveRecord_AssociationRelation) }
  def member(*args); end

  sig { params(args: T.untyped).returns(User::ActiveRecord_AssociationRelation) }
  def moderator(*args); end

  sig { params(args: T.untyped).returns(User::ActiveRecord_AssociationRelation) }
  def not_admin(*args); end

  sig { params(args: T.untyped).returns(User::ActiveRecord_AssociationRelation) }
  def not_member(*args); end

  sig { params(args: T.untyped).returns(User::ActiveRecord_AssociationRelation) }
  def not_moderator(*args); end

  sig { params(args: T.untyped).returns(User::ActiveRecord_AssociationRelation) }
  def not_private_account(*args); end

  sig { params(args: T.untyped).returns(User::ActiveRecord_AssociationRelation) }
  def not_public_account(*args); end

  sig { params(args: T.untyped).returns(User::ActiveRecord_AssociationRelation) }
  def private_account(*args); end

  sig { params(args: T.untyped).returns(User::ActiveRecord_AssociationRelation) }
  def public_account(*args); end

  sig { params(args: T.untyped).returns(User::ActiveRecord_AssociationRelation) }
  def with_attached_avatar(*args); end

  sig { returns(User::ActiveRecord_AssociationRelation) }
  def all; end

  sig { params(block: T.nilable(T.proc.void)).returns(User::ActiveRecord_AssociationRelation) }
  def unscoped(&block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_AssociationRelation) }
  def select(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_AssociationRelation) }
  def reselect(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_AssociationRelation) }
  def order(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_AssociationRelation) }
  def reorder(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_AssociationRelation) }
  def group(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_AssociationRelation) }
  def limit(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_AssociationRelation) }
  def offset(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_AssociationRelation) }
  def joins(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_AssociationRelation) }
  def left_joins(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_AssociationRelation) }
  def left_outer_joins(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_AssociationRelation) }
  def where(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_AssociationRelation) }
  def rewhere(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_AssociationRelation) }
  def preload(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_AssociationRelation) }
  def extract_associated(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_AssociationRelation) }
  def eager_load(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_AssociationRelation) }
  def includes(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_AssociationRelation) }
  def from(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_AssociationRelation) }
  def lock(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_AssociationRelation) }
  def readonly(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_AssociationRelation) }
  def extending(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_AssociationRelation) }
  def or(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_AssociationRelation) }
  def having(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_AssociationRelation) }
  def create_with(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_AssociationRelation) }
  def distinct(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_AssociationRelation) }
  def references(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_AssociationRelation) }
  def none(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_AssociationRelation) }
  def unscope(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_AssociationRelation) }
  def optimizer_hints(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_AssociationRelation) }
  def merge(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_AssociationRelation) }
  def except(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_AssociationRelation) }
  def only(*args, &block); end

  sig { params(args: T.untyped).returns(User) }
  def find(*args); end

  sig { params(args: T.untyped).returns(T.nilable(User)) }
  def find_by(*args); end

  sig { params(args: T.untyped).returns(User) }
  def find_by!(*args); end

  sig { returns(T.nilable(User)) }
  def first; end

  sig { returns(User) }
  def first!; end

  sig { returns(T.nilable(User)) }
  def second; end

  sig { returns(User) }
  def second!; end

  sig { returns(T.nilable(User)) }
  def third; end

  sig { returns(User) }
  def third!; end

  sig { returns(T.nilable(User)) }
  def third_to_last; end

  sig { returns(User) }
  def third_to_last!; end

  sig { returns(T.nilable(User)) }
  def second_to_last; end

  sig { returns(User) }
  def second_to_last!; end

  sig { returns(T.nilable(User)) }
  def last; end

  sig { returns(User) }
  def last!; end

  sig { params(conditions: T.untyped).returns(T::Boolean) }
  def exists?(conditions = nil); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def any?(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def many?(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def none?(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def one?(*args); end

  sig { override.params(block: T.proc.params(e: User).void).void }
  def each(&block); end

  sig { params(level: T.nilable(Integer)).returns(T::Array[User]) }
  def flatten(level); end

  sig { returns(T::Array[User]) }
  def to_a; end

  sig do
    type_parameters(:U).params(
        blk: T.proc.params(arg0: Elem).returns(T.type_parameter(:U)),
    )
    .returns(T::Array[T.type_parameter(:U)])
  end
  def map(&blk); end

  sig { params(records: T.any(User, T::Array[User])).returns(T.self_type) }
  def <<(*records); end

  sig { params(records: T.any(User, T::Array[User])).returns(T.self_type) }
  def append(*records); end

  sig { params(records: T.any(User, T::Array[User])).returns(T.self_type) }
  def push(*records); end

  sig { params(records: T.any(User, T::Array[User])).returns(T.self_type) }
  def concat(*records); end

  sig { params(num: T.nilable(Integer)).returns(User::ActiveRecord_AssociationRelation) }
  def page(num = nil); end

  sig { returns(User::ActiveRecord_AssociationRelation) }
  def friendly; end
end

module User::GeneratedAttributeMethods
  extend T::Sig

  sig { returns(String) }
  def bio; end

  sig { params(value: String).void }
  def bio=(value); end

  sig { returns(T::Boolean) }
  def bio?; end

  sig { returns(T.nilable(DateTime)) }
  def confirmation_sent_at; end

  sig { params(value: T.nilable(DateTime)).void }
  def confirmation_sent_at=(value); end

  sig { returns(T::Boolean) }
  def confirmation_sent_at?; end

  sig { returns(T.nilable(String)) }
  def confirmation_token; end

  sig { params(value: T.nilable(String)).void }
  def confirmation_token=(value); end

  sig { returns(T::Boolean) }
  def confirmation_token?; end

  sig { returns(T.nilable(DateTime)) }
  def confirmed_at; end

  sig { params(value: T.nilable(DateTime)).void }
  def confirmed_at=(value); end

  sig { returns(T::Boolean) }
  def confirmed_at?; end

  sig { returns(DateTime) }
  def created_at; end

  sig { params(value: DateTime).void }
  def created_at=(value); end

  sig { returns(T::Boolean) }
  def created_at?; end

  sig { returns(T.nilable(DateTime)) }
  def current_sign_in_at; end

  sig { params(value: T.nilable(DateTime)).void }
  def current_sign_in_at=(value); end

  sig { returns(T::Boolean) }
  def current_sign_in_at?; end

  sig { returns(T.nilable(T.untyped)) }
  def current_sign_in_ip; end

  sig { params(value: T.nilable(T.untyped)).void }
  def current_sign_in_ip=(value); end

  sig { returns(T::Boolean) }
  def current_sign_in_ip?; end

  sig { returns(String) }
  def email; end

  sig { params(value: String).void }
  def email=(value); end

  sig { returns(T::Boolean) }
  def email?; end

  sig { returns(String) }
  def encrypted_password; end

  sig { params(value: String).void }
  def encrypted_password=(value); end

  sig { returns(T::Boolean) }
  def encrypted_password?; end

  sig { returns(Integer) }
  def id; end

  sig { params(value: Integer).void }
  def id=(value); end

  sig { returns(T::Boolean) }
  def id?; end

  sig { returns(T.nilable(DateTime)) }
  def last_sign_in_at; end

  sig { params(value: T.nilable(DateTime)).void }
  def last_sign_in_at=(value); end

  sig { returns(T::Boolean) }
  def last_sign_in_at?; end

  sig { returns(T.nilable(T.untyped)) }
  def last_sign_in_ip; end

  sig { params(value: T.nilable(T.untyped)).void }
  def last_sign_in_ip=(value); end

  sig { returns(T::Boolean) }
  def last_sign_in_ip?; end

  sig { returns(String) }
  def privacy; end

  sig { params(value: T.any(Integer, String, Symbol)).void }
  def privacy=(value); end

  sig { returns(T::Boolean) }
  def privacy?; end

  sig { returns(T.nilable(DateTime)) }
  def remember_created_at; end

  sig { params(value: T.nilable(DateTime)).void }
  def remember_created_at=(value); end

  sig { returns(T::Boolean) }
  def remember_created_at?; end

  sig { returns(T.nilable(DateTime)) }
  def reset_password_sent_at; end

  sig { params(value: T.nilable(DateTime)).void }
  def reset_password_sent_at=(value); end

  sig { returns(T::Boolean) }
  def reset_password_sent_at?; end

  sig { returns(T.nilable(String)) }
  def reset_password_token; end

  sig { params(value: T.nilable(String)).void }
  def reset_password_token=(value); end

  sig { returns(T::Boolean) }
  def reset_password_token?; end

  sig { returns(String) }
  def role; end

  sig { params(value: T.any(Integer, String, Symbol)).void }
  def role=(value); end

  sig { returns(T::Boolean) }
  def role?; end

  sig { returns(Integer) }
  def sign_in_count; end

  sig { params(value: Integer).void }
  def sign_in_count=(value); end

  sig { returns(T::Boolean) }
  def sign_in_count?; end

  sig { returns(T.nilable(String)) }
  def slug; end

  sig { params(value: T.nilable(String)).void }
  def slug=(value); end

  sig { returns(T::Boolean) }
  def slug?; end

  sig { returns(T.nilable(String)) }
  def unconfirmed_email; end

  sig { params(value: T.nilable(String)).void }
  def unconfirmed_email=(value); end

  sig { returns(T::Boolean) }
  def unconfirmed_email?; end

  sig { returns(DateTime) }
  def updated_at; end

  sig { params(value: DateTime).void }
  def updated_at=(value); end

  sig { returns(T::Boolean) }
  def updated_at?; end

  sig { returns(String) }
  def username; end

  sig { params(value: String).void }
  def username=(value); end

  sig { returns(T::Boolean) }
  def username?; end

  sig { params(args: T.untyped).returns(T.untyped) }
  def saved_change_to_id?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def saved_change_to_id(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def id_before_last_save(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def will_save_change_to_id?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def id_change_to_be_saved(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def id_in_database(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def id_changed?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def id_change(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def id_will_change!(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def id_was(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def id_previously_changed?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def id_previous_change(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def restore_id!(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def id_before_type_cast(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def id_came_from_user?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def saved_change_to_email?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def saved_change_to_email(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def email_before_last_save(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def will_save_change_to_email?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def email_change_to_be_saved(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def email_in_database(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def email_changed?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def email_change(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def email_will_change!(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def email_was(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def email_previously_changed?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def email_previous_change(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def restore_email!(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def email_before_type_cast(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def email_came_from_user?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def saved_change_to_encrypted_password?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def saved_change_to_encrypted_password(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def encrypted_password_before_last_save(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def will_save_change_to_encrypted_password?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def encrypted_password_change_to_be_saved(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def encrypted_password_in_database(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def encrypted_password_changed?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def encrypted_password_change(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def encrypted_password_will_change!(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def encrypted_password_was(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def encrypted_password_previously_changed?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def encrypted_password_previous_change(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def restore_encrypted_password!(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def encrypted_password_before_type_cast(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def encrypted_password_came_from_user?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def saved_change_to_reset_password_token?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def saved_change_to_reset_password_token(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def reset_password_token_before_last_save(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def will_save_change_to_reset_password_token?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def reset_password_token_change_to_be_saved(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def reset_password_token_in_database(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def reset_password_token_changed?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def reset_password_token_change(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def reset_password_token_will_change!(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def reset_password_token_was(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def reset_password_token_previously_changed?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def reset_password_token_previous_change(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def restore_reset_password_token!(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def reset_password_token_before_type_cast(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def reset_password_token_came_from_user?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def saved_change_to_reset_password_sent_at?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def saved_change_to_reset_password_sent_at(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def reset_password_sent_at_before_last_save(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def will_save_change_to_reset_password_sent_at?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def reset_password_sent_at_change_to_be_saved(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def reset_password_sent_at_in_database(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def reset_password_sent_at_changed?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def reset_password_sent_at_change(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def reset_password_sent_at_will_change!(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def reset_password_sent_at_was(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def reset_password_sent_at_previously_changed?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def reset_password_sent_at_previous_change(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def restore_reset_password_sent_at!(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def reset_password_sent_at_before_type_cast(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def reset_password_sent_at_came_from_user?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def saved_change_to_remember_created_at?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def saved_change_to_remember_created_at(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def remember_created_at_before_last_save(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def will_save_change_to_remember_created_at?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def remember_created_at_change_to_be_saved(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def remember_created_at_in_database(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def remember_created_at_changed?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def remember_created_at_change(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def remember_created_at_will_change!(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def remember_created_at_was(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def remember_created_at_previously_changed?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def remember_created_at_previous_change(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def restore_remember_created_at!(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def remember_created_at_before_type_cast(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def remember_created_at_came_from_user?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def saved_change_to_sign_in_count?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def saved_change_to_sign_in_count(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def sign_in_count_before_last_save(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def will_save_change_to_sign_in_count?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def sign_in_count_change_to_be_saved(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def sign_in_count_in_database(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def sign_in_count_changed?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def sign_in_count_change(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def sign_in_count_will_change!(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def sign_in_count_was(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def sign_in_count_previously_changed?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def sign_in_count_previous_change(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def restore_sign_in_count!(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def sign_in_count_before_type_cast(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def sign_in_count_came_from_user?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def saved_change_to_current_sign_in_at?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def saved_change_to_current_sign_in_at(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def current_sign_in_at_before_last_save(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def will_save_change_to_current_sign_in_at?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def current_sign_in_at_change_to_be_saved(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def current_sign_in_at_in_database(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def current_sign_in_at_changed?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def current_sign_in_at_change(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def current_sign_in_at_will_change!(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def current_sign_in_at_was(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def current_sign_in_at_previously_changed?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def current_sign_in_at_previous_change(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def restore_current_sign_in_at!(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def current_sign_in_at_before_type_cast(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def current_sign_in_at_came_from_user?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def saved_change_to_last_sign_in_at?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def saved_change_to_last_sign_in_at(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def last_sign_in_at_before_last_save(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def will_save_change_to_last_sign_in_at?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def last_sign_in_at_change_to_be_saved(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def last_sign_in_at_in_database(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def last_sign_in_at_changed?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def last_sign_in_at_change(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def last_sign_in_at_will_change!(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def last_sign_in_at_was(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def last_sign_in_at_previously_changed?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def last_sign_in_at_previous_change(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def restore_last_sign_in_at!(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def last_sign_in_at_before_type_cast(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def last_sign_in_at_came_from_user?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def saved_change_to_current_sign_in_ip?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def saved_change_to_current_sign_in_ip(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def current_sign_in_ip_before_last_save(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def will_save_change_to_current_sign_in_ip?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def current_sign_in_ip_change_to_be_saved(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def current_sign_in_ip_in_database(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def current_sign_in_ip_changed?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def current_sign_in_ip_change(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def current_sign_in_ip_will_change!(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def current_sign_in_ip_was(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def current_sign_in_ip_previously_changed?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def current_sign_in_ip_previous_change(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def restore_current_sign_in_ip!(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def current_sign_in_ip_before_type_cast(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def current_sign_in_ip_came_from_user?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def saved_change_to_last_sign_in_ip?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def saved_change_to_last_sign_in_ip(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def last_sign_in_ip_before_last_save(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def will_save_change_to_last_sign_in_ip?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def last_sign_in_ip_change_to_be_saved(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def last_sign_in_ip_in_database(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def last_sign_in_ip_changed?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def last_sign_in_ip_change(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def last_sign_in_ip_will_change!(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def last_sign_in_ip_was(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def last_sign_in_ip_previously_changed?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def last_sign_in_ip_previous_change(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def restore_last_sign_in_ip!(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def last_sign_in_ip_before_type_cast(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def last_sign_in_ip_came_from_user?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def saved_change_to_confirmation_token?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def saved_change_to_confirmation_token(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def confirmation_token_before_last_save(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def will_save_change_to_confirmation_token?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def confirmation_token_change_to_be_saved(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def confirmation_token_in_database(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def confirmation_token_changed?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def confirmation_token_change(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def confirmation_token_will_change!(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def confirmation_token_was(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def confirmation_token_previously_changed?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def confirmation_token_previous_change(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def restore_confirmation_token!(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def confirmation_token_before_type_cast(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def confirmation_token_came_from_user?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def saved_change_to_confirmed_at?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def saved_change_to_confirmed_at(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def confirmed_at_before_last_save(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def will_save_change_to_confirmed_at?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def confirmed_at_change_to_be_saved(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def confirmed_at_in_database(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def confirmed_at_changed?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def confirmed_at_change(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def confirmed_at_will_change!(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def confirmed_at_was(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def confirmed_at_previously_changed?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def confirmed_at_previous_change(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def restore_confirmed_at!(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def confirmed_at_before_type_cast(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def confirmed_at_came_from_user?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def saved_change_to_confirmation_sent_at?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def saved_change_to_confirmation_sent_at(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def confirmation_sent_at_before_last_save(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def will_save_change_to_confirmation_sent_at?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def confirmation_sent_at_change_to_be_saved(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def confirmation_sent_at_in_database(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def confirmation_sent_at_changed?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def confirmation_sent_at_change(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def confirmation_sent_at_will_change!(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def confirmation_sent_at_was(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def confirmation_sent_at_previously_changed?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def confirmation_sent_at_previous_change(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def restore_confirmation_sent_at!(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def confirmation_sent_at_before_type_cast(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def confirmation_sent_at_came_from_user?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def saved_change_to_unconfirmed_email?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def saved_change_to_unconfirmed_email(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def unconfirmed_email_before_last_save(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def will_save_change_to_unconfirmed_email?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def unconfirmed_email_change_to_be_saved(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def unconfirmed_email_in_database(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def unconfirmed_email_changed?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def unconfirmed_email_change(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def unconfirmed_email_will_change!(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def unconfirmed_email_was(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def unconfirmed_email_previously_changed?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def unconfirmed_email_previous_change(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def restore_unconfirmed_email!(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def unconfirmed_email_before_type_cast(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def unconfirmed_email_came_from_user?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def saved_change_to_created_at?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def saved_change_to_created_at(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def created_at_before_last_save(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def will_save_change_to_created_at?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def created_at_change_to_be_saved(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def created_at_in_database(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def created_at_changed?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def created_at_change(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def created_at_will_change!(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def created_at_was(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def created_at_previously_changed?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def created_at_previous_change(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def restore_created_at!(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def created_at_before_type_cast(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def created_at_came_from_user?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def saved_change_to_updated_at?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def saved_change_to_updated_at(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def updated_at_before_last_save(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def will_save_change_to_updated_at?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def updated_at_change_to_be_saved(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def updated_at_in_database(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def updated_at_changed?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def updated_at_change(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def updated_at_will_change!(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def updated_at_was(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def updated_at_previously_changed?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def updated_at_previous_change(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def restore_updated_at!(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def updated_at_before_type_cast(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def updated_at_came_from_user?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def saved_change_to_username?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def saved_change_to_username(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def username_before_last_save(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def will_save_change_to_username?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def username_change_to_be_saved(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def username_in_database(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def username_changed?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def username_change(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def username_will_change!(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def username_was(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def username_previously_changed?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def username_previous_change(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def restore_username!(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def username_before_type_cast(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def username_came_from_user?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def saved_change_to_bio?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def saved_change_to_bio(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def bio_before_last_save(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def will_save_change_to_bio?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def bio_change_to_be_saved(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def bio_in_database(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def bio_changed?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def bio_change(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def bio_will_change!(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def bio_was(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def bio_previously_changed?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def bio_previous_change(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def restore_bio!(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def bio_before_type_cast(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def bio_came_from_user?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def saved_change_to_role?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def saved_change_to_role(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def role_before_last_save(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def will_save_change_to_role?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def role_change_to_be_saved(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def role_in_database(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def role_changed?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def role_change(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def role_will_change!(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def role_was(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def role_previously_changed?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def role_previous_change(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def restore_role!(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def role_before_type_cast(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def role_came_from_user?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def saved_change_to_slug?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def saved_change_to_slug(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def slug_before_last_save(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def will_save_change_to_slug?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def slug_change_to_be_saved(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def slug_in_database(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def slug_changed?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def slug_change(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def slug_will_change!(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def slug_was(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def slug_previously_changed?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def slug_previous_change(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def restore_slug!(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def slug_before_type_cast(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def slug_came_from_user?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def saved_change_to_privacy?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def saved_change_to_privacy(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def privacy_before_last_save(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def will_save_change_to_privacy?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def privacy_change_to_be_saved(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def privacy_in_database(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def privacy_changed?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def privacy_change(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def privacy_will_change!(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def privacy_was(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def privacy_previously_changed?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def privacy_previous_change(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def restore_privacy!(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def privacy_before_type_cast(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def privacy_came_from_user?(*args); end
end

module User::GeneratedAssociationMethods
  extend T::Sig

  sig { returns(::Relationship::ActiveRecord_Associations_CollectionProxy) }
  def active_relationships; end

  sig { params(value: T.any(T::Array[::Relationship], ::Relationship::ActiveRecord_Associations_CollectionProxy)).void }
  def active_relationships=(value); end

  sig { returns(T.nilable(::ActiveStorage::Attachment)) }
  def avatar_attachment; end

  sig { params(value: T.nilable(::ActiveStorage::Attachment)).void }
  def avatar_attachment=(value); end

  sig { returns(T.nilable(::ActiveStorage::Blob)) }
  def avatar_blob; end

  sig { params(value: T.nilable(::ActiveStorage::Blob)).void }
  def avatar_blob=(value); end

  sig { returns(::Event::ActiveRecord_Associations_CollectionProxy) }
  def events; end

  sig { params(value: T.any(T::Array[::Event], ::Event::ActiveRecord_Associations_CollectionProxy)).void }
  def events=(value); end

  sig { returns(T.nilable(::ExternalAccount)) }
  def external_account; end

  sig { params(value: T.nilable(::ExternalAccount)).void }
  def external_account=(value); end

  sig { returns(::FavoriteGame::ActiveRecord_Associations_CollectionProxy) }
  def favorite_games; end

  sig { params(value: T.any(T::Array[::FavoriteGame], ::FavoriteGame::ActiveRecord_Associations_CollectionProxy)).void }
  def favorite_games=(value); end

  sig { returns(::User::ActiveRecord_Associations_CollectionProxy) }
  def followers; end

  sig { params(value: T.any(T::Array[::User], ::User::ActiveRecord_Associations_CollectionProxy)).void }
  def followers=(value); end

  sig { returns(::User::ActiveRecord_Associations_CollectionProxy) }
  def following; end

  sig { params(value: T.any(T::Array[::User], ::User::ActiveRecord_Associations_CollectionProxy)).void }
  def following=(value); end

  sig { returns(::GamePurchase::ActiveRecord_Associations_CollectionProxy) }
  def game_purchases; end

  sig { params(value: T.any(T::Array[::GamePurchase], ::GamePurchase::ActiveRecord_Associations_CollectionProxy)).void }
  def game_purchases=(value); end

  sig { returns(::Game::ActiveRecord_Associations_CollectionProxy) }
  def games; end

  sig { params(value: T.any(T::Array[::Game], ::Game::ActiveRecord_Associations_CollectionProxy)).void }
  def games=(value); end

  sig { returns(::Relationship::ActiveRecord_Associations_CollectionProxy) }
  def passive_relationships; end

  sig { params(value: T.any(T::Array[::Relationship], ::Relationship::ActiveRecord_Associations_CollectionProxy)).void }
  def passive_relationships=(value); end

  sig { returns(::WikidataBlocklist::ActiveRecord_Associations_CollectionProxy) }
  def wikidata_blocklists; end

  sig { params(value: T.any(T::Array[::WikidataBlocklist], ::WikidataBlocklist::ActiveRecord_Associations_CollectionProxy)).void }
  def wikidata_blocklists=(value); end

  sig { returns(T.nilable(ActiveStorage::Attached::One)) }
  def avatar; end

  sig { params(attachable: T.untyped).returns(T.untyped) }
  def avatar=(attachable); end

  sig { returns(T.untyped) }
  def game_purchase_ids; end

  sig { params(ids: T.untyped).returns(T.untyped) }
  def game_purchase_ids=(ids); end

  sig { returns(T.untyped) }
  def game_ids; end

  sig { params(ids: T.untyped).returns(T.untyped) }
  def game_ids=(ids); end

  sig { returns(T.untyped) }
  def favorite_game_ids; end

  sig { params(ids: T.untyped).returns(T.untyped) }
  def favorite_game_ids=(ids); end

  sig { returns(T.untyped) }
  def active_relationship_ids; end

  sig { params(ids: T.untyped).returns(T.untyped) }
  def active_relationship_ids=(ids); end

  sig { returns(T.untyped) }
  def following_ids; end

  sig { params(ids: T.untyped).returns(T.untyped) }
  def following_ids=(ids); end

  sig { returns(T.untyped) }
  def passive_relationship_ids; end

  sig { params(ids: T.untyped).returns(T.untyped) }
  def passive_relationship_ids=(ids); end

  sig { returns(T.untyped) }
  def follower_ids; end

  sig { params(ids: T.untyped).returns(T.untyped) }
  def follower_ids=(ids); end

  sig { returns(T.untyped) }
  def event_ids; end

  sig { params(ids: T.untyped).returns(T.untyped) }
  def event_ids=(ids); end

  sig { returns(T.untyped) }
  def wikidata_blocklist_ids; end

  sig { params(ids: T.untyped).returns(T.untyped) }
  def wikidata_blocklist_ids=(ids); end

  sig { params(args: T.untyped, block: T.untyped).returns(T.untyped) }
  def build_external_account(*args, &block); end

  sig { params(args: T.untyped, block: T.untyped).returns(T.untyped) }
  def create_external_account(*args, &block); end

  sig { params(args: T.untyped, block: T.untyped).returns(T.untyped) }
  def create_external_account!(*args, &block); end

  sig { returns(T.untyped) }
  def reload_external_account; end

  sig { returns(T.untyped) }
  def external_account_ids; end

  sig { params(ids: T.untyped).returns(T.untyped) }
  def external_account_ids=(ids); end

  sig { params(args: T.untyped, block: T.untyped).returns(T.untyped) }
  def build_avatar_attachment(*args, &block); end

  sig { params(args: T.untyped, block: T.untyped).returns(T.untyped) }
  def create_avatar_attachment(*args, &block); end

  sig { params(args: T.untyped, block: T.untyped).returns(T.untyped) }
  def create_avatar_attachment!(*args, &block); end

  sig { returns(T.untyped) }
  def reload_avatar_attachment; end

  sig { returns(T.untyped) }
  def avatar_attachment_ids; end

  sig { params(ids: T.untyped).returns(T.untyped) }
  def avatar_attachment_ids=(ids); end

  sig { returns(T.untyped) }
  def avatar_blob_ids; end

  sig { params(ids: T.untyped).returns(T.untyped) }
  def avatar_blob_ids=(ids); end
end
